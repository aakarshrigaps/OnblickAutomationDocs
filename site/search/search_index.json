{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Onblick Automation Reference Guide","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the Selenium C# Automation Project for OnBlick 2.0. This project aims to automate various web application functionalities using Selenium WebDriver with C#. The goal is to ensure robust and efficient automated testing to improve the quality and reliability of the OnBlick 2.0 application.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>The Selenium C# Automation Project for OnBlick 2.0 focuses on creating a suite of automated tests to cover key functionalities of the web application. The project uses the Page Object Model (POM) design pattern to enhance code maintainability and readability.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Automated test cases for user login, navigation, and core functionalities.</li> <li>Structured using the Page Object Model for better organization and maintenance.</li> <li>Integration with continuous integration tools for automated test execution.</li> <li>Detailed test reports and logs for better visibility and analysis.</li> </ul>"},{"location":"attribute-extensions/","title":"AttributeExtensions","text":"<p><code>AttributeExtensions</code> is a library that provides a set of extension methods for working with NUnit attributes.</p>"},{"location":"attribute-extensions/#members","title":"Members","text":""},{"location":"attribute-extensions/#customretryattribute","title":"CustomRetryAttribute","text":"<p><code>CustomRetryAttribute</code> is an attribute that can be used to specify the number of times a test should be retried if it fails with a particular exception which contains <code>\"The HTTP request to the remote WebDriver server for URL\"</code> in the message.</p>"},{"location":"attribute-extensions/#constructor","title":"Constructor","text":"CustomRetryAttributeParameters <pre><code>public CustomRetryAttribute(int tryCount)\n</code></pre> Name Type Description <code>tryCount</code> <code>int</code> The number of times the test should be retried including the initial run."},{"location":"attribute-extensions/#methods","title":"Methods","text":""},{"location":"attribute-extensions/#wrap","title":"Wrap","text":"<p>Wraps a test method command and returns the result.</p> WrapParameters <pre><code>public TestCommand Wrap(TestCommand command)\n{\n    return new RetryCommand(command, _tryCount);\n}\n</code></pre> Name Type Description <code>command</code> <code>TestCommand</code> The inner command to be executed."},{"location":"attribute-extensions/#nested-class-retry-command","title":"Nested Class: Retry Command","text":"<p>The <code>RetryCommand</code> class implements the logiv for retrying a test method.</p>"},{"location":"attribute-extensions/#constructor_1","title":"Constructor","text":"RetryCommandParameters <pre><code>public RetryCommand(TestCommand innerCommand, int tryCount)\n</code></pre> Name Type Description <code>innerCommand</code> <code>TestCommand</code> The inner command to be executed. <code>tryCount</code> <code>int</code> The number of times the test should be retried including the initial run."},{"location":"attribute-extensions/#execute-method","title":"Execute Method","text":"<p>Description: Runs the test, saving a <code>TestResult</code> in the supplied <code>TestExecutionContext</code>. In case of retries, it will re-run the test after clearing drivers and reports.</p> ExecuteParametersReturns <pre><code>public override TestResult Execute(TestExecutionContext context)\n</code></pre> Name Type Description <code>context</code> <code>TestExecutionContext</code> The current <code>TestExecutionContext</code>. <p><code>TestResult</code> - The result of the test execution.</p>"},{"location":"attribute-extensions/#usage","title":"Usage","text":"Example 1Example 2 <pre><code>[Test]\n[CustomRetry(3)]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <pre><code>[Test, CustomRetry(3)]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <p>Note: Both examples apply the <code>Test</code> and <code>CustomRetry(3)</code> attributes to the <code>TestMethod</code>. The choice between the two styles is mostly a matter of personal preference or coding style guidelines</p>"},{"location":"attribute-extensions/#ignoreassertionfailuresattribute","title":"IgnoreAssertionFailuresAttribute","text":"<p>The <code>IgnoreAssertionFailuresAttribute</code> class is used to specify that a test should be marked as passed if it failed only due to soft assertion failures.</p>"},{"location":"attribute-extensions/#methods_1","title":"Methods","text":""},{"location":"attribute-extensions/#wrap_1","title":"Wrap","text":"<p>Wraps a test method command and returns the result.</p> WrapParameters <pre><code>public TestCommand Wrap(TestCommand command)\n{\n    return new IgnoreAssertionFailuresCommand(command);)\n}\n</code></pre> Name Type Description <code>command</code> <code>TestCommand</code> The inner command to be executed."},{"location":"attribute-extensions/#nested-class-ignore-assertion-failures-command","title":"Nested Class: Ignore Assertion Failures Command","text":"<p>The <code>IgnoreAssertionFailuresCommand</code> class implements the logic for ignoring assertion failures.</p>"},{"location":"attribute-extensions/#constructor_2","title":"Constructor","text":"IgnoreAssertionFailuresCommandParameters <pre><code>public IgnoreAssertionFailuresCommand(TestCommand innerCommand)\n</code></pre> Name Type Description <code>innerCommand</code> <code>TestCommand</code> The inner command to be executed."},{"location":"attribute-extensions/#execute-method_1","title":"Execute Method","text":"<p>Description: Runs the test, saving a <code>TestResult</code> in the supplied <code>TestExecutionContext</code>. In case of test failure only due to assertion failures, it will mark the test as passed.</p> ExecuteParametersReturns <pre><code>public override TestResult Execute(TestExecutionContext context)\n</code></pre> Name Type Description <code>context</code> <code>TestExecutionContext</code> The current <code>TestExecutionContext</code>. <p><code>TestResult</code> - The result of the test execution.</p>"},{"location":"attribute-extensions/#usage_1","title":"Usage","text":"Example 1Example 2 <pre><code>[Test]\n[IgnoreAssertionFailures]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <pre><code>[Test, IgnoreAssertionFailures]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <p>Note: Both examples apply the <code>Test</code> and <code>CustomRetry(3)</code> attributes to the <code>TestMethod</code>. The choice between the two styles is mostly a matter of personal preference or coding style guidelines</p>"},{"location":"best-practices/","title":"Best Practices","text":"<ul> <li>Use meaningful and descriptive names: Name your variables, functions, and classes descriptively to clearly convey their purpose, e.g., <code>LoginPage</code>, <code>SubmitButton</code>, <code>EnterCredentials</code>.</li> <li>Follow the SOLID principles: Apply SOLID principles to design clean, maintainable, and scalable automation frameworks.</li> <li>Proper exception handling: Implement robust exception handling to manage errors and failures gracefully. Use try-catch blocks and custom exceptions where appropriate.</li> <li>Version control: Use Git or other version control systems to track changes, manage different versions of your test scripts, and collaborate effectively with team members.</li> <li>Avoid magic numbers and hard-coded values: Use constants, configuration files, or environment variables for values like URLs, timeouts, and credentials to enhance maintainability and flexibility.</li> <li>Modular and organized code: Keep your test code modular by organizing it into namespaces and folders based on functionality (e.g., <code>Pages</code>, <code>Tests</code>, <code>Utilities</code>).</li> <li>Comment your code: Use comments to explain the purpose, logic, and functionality of your code, especially complex test scenarios or custom utilities.</li> <li>Optimize for performance: Write efficient test scripts by avoiding unnecessary loops, redundant actions, and using appropriate synchronization methods like explicit waits.</li> <li>Coding conventions and style guidelines: Adhere to C# coding standards and your project's specific style guidelines to ensure consistency and readability across the codebase.</li> <li>Regularly refactor your code: Continuously improve the readability, efficiency, and maintainability of your test scripts by refactoring and cleaning up code.</li> <li>Use dependency injection: Implement dependency injection in your framework to decouple components, making your tests more modular, reusable, and easier to test.</li> <li>Security best practices: Follow security best practices, such as input validation and data sanitization, to protect sensitive information in your test scripts.</li> <li>Logging and reporting: Implement logging to capture detailed information about test execution and issues. Use reporting tools to generate clear and informative test reports.</li> <li>Continuous learning: Stay updated with the latest trends, tools, and best practices in Selenium, C#, and automation testing. Regularly participate in training and community forums.</li> <li>Use Page Object Model (POM): Structure your automation code using the Page Object Model to enhance maintainability and reusability by separating page-specific logic from test scripts.</li> <li>Avoid using deprecated features: Refrain from using outdated features like PageFactory, and adopt newer, more reliable alternatives to ensure compatibility and stability in your automation framework.</li> </ul>"},{"location":"browser-options/","title":"BrowserOptions","text":""},{"location":"browser-options/#defaultchromeoptions","title":"DefaultChromeOptions","text":"<p>The <code>DefaultChromeOptions</code> class extends <code>ChromeOptions</code> to provide a default configuration for Chrome WebDriver instances.</p>"},{"location":"browser-options/#configuration-details","title":"Configuration Details","text":"<ol> <li>Download Directory:<ul> <li>Path: <code>..\\..\\..\\Downloads</code> (relative to the current execution directory).</li> <li>Ensures the directory is created if it does not exist.</li> </ul> </li> <li>Logging Preferences:<ul> <li>Browser logs: Set to <code>LogLevel.Severe</code>.</li> <li>Performance logs: Set to <code>LogLevel.All</code>.</li> </ul> </li> <li>Chrome Arguments:<ul> <li><code>--disable-extensions</code>: Disables any extensions.</li> <li><code>--disable-popup-blocking</code>: Disables popup blocking.</li> <li><code>--start-maximized</code>: Maximizes the browser window.</li> <li><code>--foreground-flash-enabled</code>: Brings the window to the foreground.</li> <li><code>--window-size=1920x1080</code>: Sets the screen resolution to 1920x1080 for functional tests.</li> <li><code>--headless</code>: (Commented out) Executes tests in headless mode.</li> </ul> </li> </ol> <p>Note: Only Chrome Browser is used for automation as of now. More browsers shall be used in the future for cross-browser testing.</p>"},{"location":"ci/","title":"Continuous Integration","text":""},{"location":"ci/#pipelines","title":"Pipelines","text":"<ol> <li>This project uses Azure Devops Pipelines for Continuous Integration.</li> <li>There are multiple pipelines that are used to test in different environments whenever there are new releases. </li> <li>The pipelines are triggered based on <code>testCategory</code> - which are assigned to each test. <ul> <li>The test categories are <code>Smoke</code>, <code>Sanity</code>, <code>Regression</code>, <code>Timesheets</code>, <code>NewFormI9</code> and so on and so forth. </li> <li>The pipelines are triggered based on the test category and the test environment (<code>demo</code>, <code>prod</code>, <code>dev</code> etc.,).</li> </ul> </li> <li>The pipelines are also named based on the test category and the test environment.<ul> <li>For example, <code>Demo-Smoke</code>, <code>Demo-Sanity</code>, <code>Prod-Sanity</code> etc.,</li> </ul> </li> <li>Both <code>Demo-Smoke</code> and <code>Demo-Sanity</code> are scheduled to run Mon-Fri at <code>7:45 AM IST</code> and <code>8:30 AM IST</code> respectively.</li> <li>All the other pipelines can only be triggered manually.</li> </ol>"},{"location":"ci/#stages","title":"Stages","text":"<ol> <li>The pipelines have multiple stages - but all stages are simliar/same between different pipelines.</li> <li>The stages are:<ul> <li><code>Initialize Job</code>: This stage initializes the job, install any tasks that are required and sets the variables required for the pipeline.</li> <li><code>Checkout</code>: This stage checks out the code from the repository.</li> <li><code>Initialize Report Folderpath</code>: This stage creates the folder structure for the test reports.</li> <li><code>Set Screen Resolution</code>: This stage sets the screen resolution for the tests.</li> <li><code>Install Dependencies</code>: This stage installs the dependencies (Restore NuGet Packages using <code>dotnet restore</code>) required for the tests.</li> <li><code>Build Solution</code>: This stage builds the solution using <code>dotnet build</code>.</li> <li><code>Run Tests</code>: This stage runs the tests using <code>dotnet test</code> and publishes the test run.</li> <li><code>Publish Extent Reports</code>: This stage publishes the test reports as artifacts.</li> <li><code>Cleanup Reports folder</code>: This stage cleans up the reports folder.</li> <li><code>Finalize Job</code>: This stage finalizes the job and cleans up any resources that are used.</li> <li><code>Report build status</code>: This stage sets the build status for the current commit.</li> </ul> </li> <li>The stages are executed in the order mentioned above.</li> <li>The stages are executed in the same order for all the pipelines.</li> </ol>"},{"location":"ci/#test-results","title":"Test Results","text":"<ol> <li>The test results are published to Azure Devops Pipelines.</li> <li>The test results are published in the form of <code>Test Run</code> and <code>Test Result</code> in the Azure Devops Pipelines.</li> </ol>"},{"location":"ci/#test-reports","title":"Test Reports","text":"<ol> <li>The test reports are published as Artifacts to Azure Devops Pipelines.</li> <li>The test reports are published in the form of <code>HTML</code> files in the <code>ExtentReports</code> directory of the published artifacts for the build pipeline.</li> </ol>"},{"location":"ci/#test-logs","title":"Test Logs","text":"<ol> <li>You can view the test logs in the <code>Run Tests</code> task of the pipeline.</li> <li>The logs are grouped by tests and also colored based on the test pass or fail status.</li> <li>The logs also contain each test step from <code>ExecuteStep</code> whenever the current step has started and finished.</li> <li>All these logs are colored and grouped based on their status and tests so they are easy to read and understand.</li> </ol>"},{"location":"ci/#email-notifications","title":"Email Notifications","text":"<ol> <li>The pipelines are configured to send email notifications to the team whenever the pipeline finishes running.</li> <li>The email notifications are sent to the team members who are part of the teams - <code>automationteam@onblick.com</code> and <code>qateam@onblick.com</code>.</li> <li>The email notifications contain the test result and a link to the test run where you can also download the test report.</li> </ol>"},{"location":"debugging/","title":"Debugging","text":"<p>Debugging is an essential part of software development, especially when working with Selenium tests in C# automation. Below are steps and tips to effectively debug your Selenium tests.</p>"},{"location":"debugging/#setting-up-the-debugger","title":"Setting Up the Debugger","text":"<ol> <li>Open Your Test File: Navigate to the test file or test method you wish to debug.</li> <li>Right-Click to Select Debug Option: Right-click on the test file or method and select <code>Debug Tests</code> from the context menu. This will start the test runner in debug mode.</li> <li>Set Breakpoints: Click in the gutter (left margin) next to the line numbers in your code to set breakpoints. The debugger will pause execution at these points, allowing you to inspect variables and the flow of execution.</li> </ol>"},{"location":"debugging/#using-breakpoints","title":"Using Breakpoints","text":"<p>Breakpoints are markers that tell the debugger to pause execution at a specific line of code. This allows you to examine the state of the program at that point.</p> <ol> <li>Add Breakpoints: Click on the left margin next to the line number where you want to pause execution.</li> <li>Run the Debugger: Start the debugger by selecting <code>Debug Tests</code>.</li> <li>Inspect Variables: Hover over variables to see their current values, or use the <code>Variables</code> pane to inspect and modify their values.</li> <li>Step Through Code:<ul> <li>Step Over (F10): Execute the next line of code, but do not step into function calls.</li> <li>Step Into (F11): Step into the next function call.</li> <li>Step Out (Shift + F11): Step out of the current function and return to the caller.</li> <li>Continue (F5): Resume execution until the next breakpoint is hit.</li> </ul> </li> </ol>"},{"location":"debugging/#inspecting-variables","title":"Inspecting Variables","text":"<p>When execution is paused at a breakpoint, you can inspect the current state of your program:</p> <ul> <li>Locals Window: Displays variables that are in the current scope.</li> <li>Watch Window: Allows you to specify variables you want to keep an eye on.</li> <li>Immediate Window: You can evaluate expressions and execute code snippets to see their results.</li> </ul>"},{"location":"debugging/#debugging-tests","title":"Debugging Tests","text":"<ol> <li>Initialize WebDriver in Debug Mode: Ensure your WebDriver is correctly initialized and running. Verify browser instances are launched as expected.</li> <li>Check Element Locators: Use the debugger to verify that element locators (<code>IDs</code>, <code>XPaths</code>, <code>CSS Selectors</code>) are correct and elements are being found.</li> <li>Waits and Timeouts: Debug any issues related to waits and timeouts (e.g., <code>WebDriverWait</code>, <code>ImplicitWait</code>). Ensure that elements have enough time to load and interact.</li> <li>Screenshots: Capture screenshots at different points to visualize what the browser is displaying. Use (<code>(ITakesScreenshot)driver).GetScreenshot().SaveAsFile(...)</code> to save screenshots.</li> <li>JavaScript Execution: Debug JavaScript execution within your Selenium tests to ensure scripts are running as expected using <code>((IJavaScriptExecutor)driver).ExecuteScript(...)</code>.</li> </ol>"},{"location":"debugging/#common-debugging-techniques","title":"Common Debugging Techniques","text":"<ol> <li>Print Statements: Add <code>Console.WriteLine</code> statements in your code to output variable values and checkpoints. While not as powerful as a debugger, this can be a quick way to understand code flow.</li> <li>Conditional Breakpoints: Set conditions for breakpoints so they only pause execution when certain criteria are met.</li> <li>Exception Breakpoints: Configure the debugger to break when exceptions are thrown, allowing you to examine the state of the program at the point of failure.</li> <li>Log Files: Use logging to record the execution flow and variable states to a file, which can be reviewed after test runs.</li> </ol>"},{"location":"debugging/#advanced-debugging-features","title":"Advanced Debugging Features","text":"<ul> <li>Remote Debugging: Attach the debugger to a process running on a remote machine.</li> <li>Debugging External Code: Enable debugging of external libraries and framework code to understand issues that arise outside of your own codebase.</li> <li>Snapshot Debugging: Take a snapshot of your application's state at a specific point in time for later inspection.</li> </ul>"},{"location":"debugging/#debugging-best-practices","title":"Debugging Best Practices","text":"<ol> <li>Isolate Issues: Focus on one problem at a time. Trying to debug multiple issues simultaneously can be confusing and inefficient.</li> <li>Reproduce the Problem: Ensure that you can consistently reproduce the problem. Intermittent issues can be much harder to diagnose.</li> <li>Understand the Code: Take the time to understand the code you're debugging. Knowing the expected behavior helps in identifying what went wrong.</li> <li>Use Version Control: Keep your code under version control so you can easily revert to a known good state if needed.</li> <li>Document Bugs: Document any bugs you find, along with the steps to reproduce them and the solutions you implemented. This can be helpful for future reference.</li> </ol>"},{"location":"extent-manager/","title":"ExtentManager","text":"<p>Below are the methods in the <code>ExtentManager</code> class used to manage the extent reports:</p>"},{"location":"extent-manager/#members","title":"Members","text":""},{"location":"extent-manager/#getinstance","title":"GetInstance","text":"<p>Creates a new <code>HtmlReporter</code> instance, attaches it to the <code>ExtentReports</code> instance and returns the <code>ExtentReports</code> instance.</p> Method SignatureReturnsUsage <pre><code>public static ExtentReports GetInstance()\n</code></pre> <p>An <code>ExtentReports</code> instance.</p> <p>Used in <code>ReportsGenerationClass</code> to get the <code>ExtentReports</code> instance.) <pre><code>ExtentReports extent = ExtentManager.GetInstance();\n</code></pre></p>"},{"location":"first-test/","title":"Writing Your First Test","text":""},{"location":"first-test/#first-test","title":"First Test","text":"<p>Now that we have our project set up, let's write our first test. We'll write a test that verifies that the Login function (<code>LoginPage.ValidLogin()</code>) works correctly. We'll write this test in a new file called <code>LoginTest.cs</code> in the <code>Test Plans</code> directory.</p> <pre><code>using NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System;\n\nnamespace Test\n{\n    public class LoginTest\n    {\n        IWebDriver driver;\n\n        [SetUp]\n        public void Setup()\n        {\n            driver = new ChromeDriver();\n            driver.Manage().Window.Maximize();\n        }\n\n        [Test]\n        public void ValidLogin()\n        {\n            LoginPage loginPage = new LoginPage(driver);\n            loginPage.ValidLogin(LoginCreds.Instance.HR_Email,LoginCreds.Instance.HR_Pwd);\n            Assert.IsTrue(driver.Url.Contains(\"dashboard\"));\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            driver.Quit();\n        }\n    }\n}\n</code></pre> <p>This <code>ValidLogin()</code> method is already defined in the <code>LoginPage</code> class. We're using the <code>Assert.IsTrue()</code> method to verify that the URL contains the string \"dashboard\" after a successful login. If the URL contains \"dashboard\", the test passes. If it doesn't, the test fails. And the <code>LoginCreds</code> class is also already defined in <code>TestData\\LoginCredentials</code> folder. This class is used to store the login credentials for the test which are retrieved from <code>creds.json</code>.</p> <p>The pseudo-code in <code>ValidLogin()</code> method is as follows:</p> Pseudo Code <pre><code>Navigate to the login page\nEnter the email and password\nClick the login button\n</code></pre>"},{"location":"first-test/#real-time-example-for-new-test","title":"Real-time Example for New Test","text":"<ul> <li>First, create a new file in each Test Plans, Test Data, Page Object folders respectively</li> <li>Create a new test in the Test Plans folder corresponding to your current Test, let's name it <code>MyFirstTest.cs</code>.</li> <li>Create a new page object in the Page Object folder, let's name it <code>MyFirstPage.cs</code>. This file will contain all the locators and methods necessary to interact with the current page.<ul> <li>In case the number of methods is vast, you can separate the methods into a different file and create it in the <code>WebInteractions</code> folder. Let's name it <code>MyFirstInteractions.cs</code>.</li> <li>In our project, the private By locator in the PageObject and the method that's used to access to the locator are written in the same line so as to be able to sort the locators easily.</li> </ul> </li> <li>Create a new test data file in the Test Data folder, let's name it <code>MyFirstData.cs</code>. This file will contain all the data necessary for the test.</li> </ul>"},{"location":"first-test/#sample-code","title":"Sample Code","text":"MyFirstTest.csMyFirstPage.csMyFirstInteractions.csMyFirstData.cs <pre><code>using NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System;\n\nnamespace Test\n{\n    public class MyFirstTest\n    {\n        IWebDriver driver;\n\n        [SetUp]\n        public void Setup()\n        {\n            driver = new ChromeDriver();\n            driver.Manage().Window.Maximize();\n        }\n\n        [Test]\n        public void MyFirstTest()\n        {\n            MyFirstPage myFirstPage = new MyFirstPage(driver);\n            MyFirstInteractions myFirstInteractions = new MyFirstInteractions(driver);\n\n            myFirstInteractions.MyFirstMethod(MyFirstData.Username, MyFirstData.Password);\n            Assert.IsTrue(driver.Url.Contains(\"dashboard\"));\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            driver.Quit();\n        }\n    }\n}\n</code></pre> <pre><code>using OpenQA.Selenium;\nusing System;\n\nnamespace PageObjects\n{\n    public class MyFirstPage\n    {\n        IWebDriver driver;\n\n        //Locators for your elements go here\n        private By MyLocator = By.Id(\"myElement\"); \n        public By MyLocatorId() { return MyLocator; }\n\n        public MyFirstPage(IWebDriver driver)\n        {\n            this.driver = driver;\n        }\n\n        //if you do use PageFactory, use the elements from PageFactory here\n        [FindsBy(How = How.Id, Using = \"myElement\")]\n        public IWebElement MyElement\n    }\n}\n</code></pre> <pre><code>using OpenQA.Selenium;\nusing System;\n\nnamespace WebInteractions\n{\n    public class MyFirstInteractions\n    {\n        IWebDriver driver;\n\n        public MyFirstInteractions(IWebDriver driver)\n        {\n            this.driver = driver;\n        }\n\n        public void MyFirstMethod(string data)\n        {\n            // Write your code here\n        }\n    }\n}\n</code></pre> <pre><code>using System;\n\nnamespace TestData\n{\n    public class MyFirstData\n    {\n        //Test Data that you'll use in your Tests\n\n        public static readonly string Username = \"myUsername\";\n        public static readonly string Password = \"myPassword\";\n    }\n}\n</code></pre>"},{"location":"git/","title":"Using Git","text":""},{"location":"git/#what-is-git","title":"What is Git?","text":"<p>Git is a version control system that allows you to track changes in your code. It is a distributed version control system, which means that you can work on your code locally and then push your changes to a remote repository. This is useful for collaboration, as multiple people can work on the same codebase without interfering with each other's work.</p>"},{"location":"git/#why-use-git","title":"Why use Git?","text":"<ul> <li>Keep track of changes in your code.</li> <li>Collaborate with others.</li> <li>Easily revert to previous versions of your code.</li> <li>Keep your code safe and secure.</li> </ul>"},{"location":"git/#how-to-use-git","title":"How to use Git","text":""},{"location":"git/#installing-git","title":"Installing Git","text":"<p>To install Git, go to the Git website and download the appropriate version for your operating system. Follow the installation instructions to install Git on your machine.</p>"},{"location":"git/#setting-up-git","title":"Setting up Git","text":"<p>Once Git is installed, you need to configure it with your name and email address. Open a terminal window and run the following commands:</p> Configuration Commands <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"Your Email\"\n</code></pre>"},{"location":"git/#integrated-git-support-for-visual-studio-2022","title":"Integrated Git Support for Visual Studio 2022","text":"<p>Visual Studio 2022 has built-in support for Git, which makes it easy to manage your code using Git. To enable Git support in Visual Studio 2022, follow these steps:</p> <ol> <li>Open Visual Studio 2022.</li> <li>Open <code>Git</code>.</li> <li>Open <code>Settings</code>.</li> <li>Here you can configure your Git settings, such as your name and email address as we did in the previous step.</li> <li>You can also configure other settings, such as default location and manage remote branches etc.,</li> <li>You will have access to almost all git commands in the Visual Studio 2022 UI but you can also use the terminal to run git commands.</li> </ol>"},{"location":"git/#git-commands","title":"Git Commands","text":"<p>Here are some common Git commands that you will use when working with Git:</p> Git CommandsUsage <pre><code>git init\ngit add .\ngit commit -m \"Commit message\"\ngit status\ngit log\ngit push\ngit pull\ngit clone\n</code></pre> <ol> <li><code>git init</code>: Initializes a new Git repository in the current directory.</li> <li><code>git add .</code>: Adds all files in the current directory to the staging area.</li> <li><code>git commit -m \"Commit message\"</code>: Commits the changes in the staging area with the specified commit message.</li> <li><code>git status</code>: Shows the status of the current repository, including which files are staged, modified, or untracked.</li> <li><code>git log</code>: Shows the commit history of the repository.</li> <li><code>git push</code>: Pushes the changes in the local repository to the remote repository.</li> <li><code>git pull</code>: Pulls the changes from the remote repository to the local repository.</li> <li><code>git clone</code>: Clones a remote repository to the local machine.</li> </ol>"},{"location":"git/#git-workflow","title":"Git Workflow","text":"<p>Here is a typical Git workflow diagram. </p>"},{"location":"git/#diagram-representation","title":"Diagram Representation","text":""},{"location":"git/#local-repository","title":"Local Repository","text":""},{"location":"git/#working-tree","title":"Working Tree","text":"<ul> <li>Description: This is your local working directory where you make changes to your files.</li> <li>Commands:<ul> <li><code>git add</code>: Moves changes from the working tree to the staging area.</li> </ul> </li> </ul>"},{"location":"git/#indexstaging-area","title":"Index/Staging Area","text":"<ul> <li>Description: The staging area holds changes that are ready to be committed.</li> <li>Commands:<ul> <li><code>git commit</code>: Records changes from the staging area to the local branch.</li> </ul> </li> </ul>"},{"location":"git/#local-branch","title":"Local Branch","text":"<ul> <li>Description: This is your local branch where commits are recorded.</li> <li>Commands:<ul> <li><code>git push</code>: Sends committed changes from the local branch to the remote repository.</li> <li><code>git checkout</code>: Switches between branches in your local repository.</li> <li><code>git merge/rebase</code>: Integrates changes from one branch into another.</li> </ul> </li> </ul>"},{"location":"git/#remote-repository","title":"Remote Repository","text":""},{"location":"git/#remote-tracking-ref","title":"Remote-Tracking Ref","text":"<ul> <li>Description: This is a reference to the state of branches in the remote repository.</li> <li>Commands:<ul> <li><code>git fetch</code>: Retrieves updates from the remote repository without integrating them.</li> <li><code>git pull</code>: Fetches updates from the remote repository and merges them into the local branch.</li> </ul> </li> </ul>"},{"location":"git/#remote-branch","title":"Remote Branch","text":"<ul> <li>Description: The branch in the remote repository (e.g., <code>origin/master</code>).</li> </ul>"},{"location":"git/#commands-summary","title":"Commands Summary","text":"<ul> <li><code>git add</code>: Adds changes to the staging area.</li> <li><code>git commit</code>: Commits changes to the local branch.</li> <li><code>git push</code>: Pushes changes to the remote repository.</li> <li><code>git fetch</code>: Fetches updates from the remote repository.</li> <li><code>git pull</code>: Fetches and merges changes from the remote repository.</li> <li><code>git checkout</code>: Switches branches.</li> <li><code>git merge/rebase</code>: Merges or rebases branches.</li> </ul>"},{"location":"git/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Make changes in your working tree.</li> <li>Stage changes using <code>git add</code>.</li> <li>Commit changes to your local branch with <code>git commit</code>.</li> <li>Push changes to the remote repository using <code>git push</code>.</li> <li>Fetch updates from the remote repository using <code>git fetch</code>.</li> <li>Pull updates and merge them into your local branch with <code>git pull</code>.</li> <li>Switch branches using <code>git checkout</code> as needed.</li> <li>Merge or rebase branches using <code>git merge/rebase</code>.</li> </ol>"},{"location":"login-creds/","title":"LoginCreds","text":"<p>This class is used to store the login credentials of the <code>HR Manager</code> or <code>Employer</code> under test. The credentials are stored as static variables in <code>creds.json</code> with a dynamic environment-based assignment and can be accessed using the <code>Instance</code>.</p> LoginCreds.cs <pre><code>public static LoginCreds Instance =&gt; _instance.Value;\n...\n...\npublic string HR_Email =&gt; _envConfig.GetProperty(nameof(HR_Email)).GetString();\n</code></pre>"},{"location":"login-creds/#usage","title":"Usage","text":"EmailPassword <pre><code>var hrEmail = LoginCreds.Instance.HR_Email;\n</code></pre> <pre><code>var hrPassword = LoginCreds.Instance.HR_Password;\n</code></pre> <p>Note: There are three separate sets of credential details in creds.json, each arranged for different organizations.</p>"},{"location":"pom-guidelines/","title":"Project Guidelines","text":"<p>Page Object Model in our current Project follows some guidelines and practices. These guidelines are created to ensure that the project is maintainable, scalable and readable.</p>"},{"location":"pom-guidelines/#constructing-locators","title":"Constructing Locators","text":"<p>Below are the conventions to follow for writing locators in the project:</p> <ol> <li>Use ID, Name, CSS, XPath locators in the order of preference:<ul> <li>ID is the most preferred locator followed by Name, CSS and XPath.</li> <li>If ID is not available, use Name locator.</li> <li>If Name locator is not available, use CSS locator.</li> <li>If CSS locator is not available, use XPath locator.</li> <li>But more often than not, in Onblick 2.0 ID, Class, CSS locators are dynamically generated. So it is better to use XPath locators.</li> </ul> </li> <li>Use Relative XPath:<ul> <li>Always use relative XPath instead of absolute XPath.</li> <li>Avoid using absolute XPath as it is not reliable and breaks easily.</li> <li>Use XPath axes like <code>following-sibling</code>, <code>preceding-sibling</code>, <code>parent</code>, <code>child</code>, <code>ancestor</code>, <code>descendant</code> etc. to create more reliable XPath.</li> <li>Use <code>normalize-space</code>, <code>contains</code>, <code>starts-with</code>, <code>ends-with</code> functions in XPath to create more reliable XPath.</li> </ul> </li> </ol> Example <pre><code>// Relative XPath\nBy.XPath(\"//input[@id='username']\")\n\n// Absolute XPath\nBy.XPath(\"/html/body/div[1]/div[2]/div[3]/div[4]/input\")\n</code></pre>"},{"location":"pom-guidelines/#best-practices-for-current-project","title":"Best Practices for Current Project","text":"<ol> <li>Use Page Object Model:<ul> <li>Use Page Object Model to create a separate class for each page.</li> <li>Define all the locators (and methods - optional) related to that page in that class.</li> </ul> </li> <li>Use Page Factory:<ul> <li>Use Page Factory to initialize the elements in the page class.</li> <li>Use <code>FindsBy</code> annotation to define the locators in the page class.</li> <li>Use <code>PageFactory.InitElements(driver, this)</code> to initialize the elements in the page class.</li> <li>Note: <code>PageFactory</code> was used in the current project in almost all page object classes. However, the more recent versions of Selenium do not support <code>PageFactory</code> so it is better to avoid using it in the new page object classes.</li> </ul> </li> </ol> ExampleExample of PageFactoryPageObject Class <pre><code>private readonly By Username = By.Id(\"username\"); public By UsernameId() { return Username; }\nprivate readonly By Password = By.Id(\"password\"); public By PasswordId() { return Password; }\n</code></pre> <pre><code>//Only in case you do end up using it, here is an example of how to use it:\n[FindsBy(How = How.Id, Using = \"username\")]\nprivate IWebElement Username\n\n[FindsBy(How = How.Id, Using = \"password\")]\nprivate IWebElement Password\n</code></pre> <pre><code>public class LoginPage\n{\n    private readonly IWebDriver driver;\n\n    private readonly By Username = By.Id(\"username\"); public By UsernameId() { return Username; }\n    private readonly By Password = By.Id(\"password\"); public By PasswordId() { return Password; }\n\n    public LoginPage(IWebDriver driver)\n    {\n        this.driver = driver;\n        PageFactory.InitElements(driver, this);\n    }\n\n    [FindsBy(How = How.Id, Using = \"username\")]\n    private IWebElement Username;\n\n    [FindsBy(How = How.Id, Using = \"password\")]\n    private IWebElement Password;\n\n    public void Login(string username, string password)\n    {\n        Username.SendKeys(username);\n        Password.SendKeys(password);\n    }\n}\n</code></pre>"},{"location":"pom-introduction/","title":"Page Object Model","text":""},{"location":"pom-introduction/#introduction","title":"Introduction","text":"<p>Page Object Model is a design pattern which has become popular in test automation for enhancing test maintenance and reducing code duplication. A page object is an object-oriented class that serves as an interface to a page of your application. </p>"},{"location":"pom-introduction/#benefits-of-page-object-model","title":"Benefits of Page Object Model","text":"<ol> <li>Code Reusability: Page Object Model allows you to write your tests in a more modular way, which means that you can reuse the same page object in multiple tests. This reduces code duplication and makes your tests easier to maintain.</li> <li>Code Maintainability: Page Object Model makes your tests more maintainable because it separates the test logic from the page-specific logic. This means that if the page changes, you only need to update the page object, rather than updating all of your tests.</li> <li>Readability: Page Object Model makes your tests more readable because it encapsulates the page-specific logic in a separate class. This makes it easier to understand what the test is doing, and makes it easier to write new tests.</li> <li>Reduced Code Duplication: Page Object Model reduces code duplication by encapsulating the page-specific logic in a separate class. This means that you only need to write the page-specific logic once, rather than duplicating it in multiple tests.</li> <li>Improved Test Stability: Page Object Model improves test stability by encapsulating the page-specific logic in a separate class. This means that if the page changes, you only need to update the page object, rather than updating all of your tests.</li> </ol>"},{"location":"pom-introduction/#page-object-model-in-selenium","title":"Page Object Model in Selenium","text":"<p>In Selenium, Page Object Model is implemented by creating a separate class for each page of your application. Each page object class contains the page-specific logic, such as finding elements on the page and interacting with them. The test logic is then written in separate test classes, which use the page object classes to interact with the pages of the application.</p>"},{"location":"pom-introduction/#example","title":"Example","text":"<p>In this example, we will create a page object class for the Google search page. The page object class will contain methods for interacting with the search page, such as entering a search query and clicking the search button. We will then write a test class that uses the page object class to perform a search on the Google search page.</p> Page Object ClassTest ClassExplanation <pre><code>using OpenQA.Selenium;\nusing OpenQA.Selenium.Support.UI;\n\nnamespace PageObjectModel\n{\n    public class GoogleSearchPage\n    {\n        private IWebDriver driver;\n        private By searchBox = By.Name(\"q\");\n        private By searchButton = By.Name(\"btnK\");\n\n        public GoogleSearchPage(IWebDriver driver)\n        {\n            this.driver = driver;\n        }\n\n        public void EnterSearchQuery(string query)\n        {\n            driver.FindElement(searchBox).SendKeys(query);\n        }\n\n        public void ClickSearchButton()\n        {\n            driver.FindElement(searchButton).Click();\n        }\n\n        public void WaitForSearchResults()\n        {\n            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));\n            wait.Until(ExpectedConditions.ElementIsVisible(By.Id(\"result-stats\")));\n        }\n    }\n}\n</code></pre> <pre><code>using OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing OpenQA.Selenium.Support.UI;\nusing System;\n\nnamespace PageObjectModel\n{\n    [TestFixture]\n    public class GoogleSearch\n    {\n        [SetUp]\n        public void SetUp()\n        {\n            IWebDriver driver = new ChromeDriver();\n            driver.Navigate().GoToUrl(\"https://www.google.com\");\n        }\n\n        [Test]\n        public void GoogleSearch_Test()\n        {\n            GoogleSearchPage searchPage = new GoogleSearchPage(driver);\n            searchPage.EnterSearchQuery(\"Selenium\");\n            searchPage.ClickSearchButton();\n            searchPage.WaitForSearchResults();\n        }\n\n        [CleanUp]\n        public void CleanUp()\n        {\n            driver.Quit();\n        }\n    }\n}\n</code></pre> <ol> <li>The <code>GoogleSearchPage</code> class is a page object class that represents the Google search page.</li> <li>The class has a constructor that takes an <code>IWebDriver</code> object as a parameter. This allows the page object class to interact with the browser.</li> <li>The class has methods for interacting with the search page, such as entering a search query, clicking the search button, and waiting for the search results to load.</li> <li>The <code>searchBox</code> and <code>searchButton</code> fields are <code>By</code> objects that represent the search box and search button elements on the page.</li> <li>The <code>EnterSearchQuery</code> method enters a search query into the search box.</li> <li>The <code>ClickSearchButton</code> method clicks the search button.</li> <li>The <code>WaitForSearchResults</code> method waits for the search results to load by waiting for the <code>result-stats</code> element to be visible.</li> <li>The <code>GoogleSearch</code> class is a test class that uses the <code>GoogleSearchPage</code> class to perform a search on the Google search page.</li> <li>The <code>SetUp</code> method creates a new <code>ChromeDriver</code> instance and navigates to the Google search page.</li> <li>The <code>GoogleSearch_Test</code> method creates a new <code>GoogleSearchPage</code> instance and performs a search for \"Selenium\".</li> <li>The <code>CleanUp</code> method quits the browser after the test has finished running.</li> </ol>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>Before starting, ensure you have the following:</p>"},{"location":"prerequisites/#visual-studio-2022-or-later","title":"Visual Studio 2022 or later","text":"<ul> <li>You can use the free Community edition of Visual Studio.</li> <li>Make sure to install the .NET Desktop Development workload.)</li> </ul>"},{"location":"prerequisites/#net-8-sdk","title":".NET 8 SDK","text":"<ul> <li>Make sure to install the .NET 8 SDK to build and run this project.</li> <li>You can verify the installation by running <code>dotnet --version</code> in your terminal to ensure it outputs a version number starting with 8.</li> </ul>"},{"location":"prerequisites/#git","title":"Git","text":"<ul> <li>You can verify the installation by running <code>git --version</code> in your terminal to ensure it outputs a version number.</li> <li>You can use the command line or a GUI like GitHub Desktop or use the integrated git support in Visual Studio 2022.</li> </ul>"},{"location":"prerequisites/#others","title":"Others","text":"<ul> <li>Basic knowledge of C#</li> <li>NuGet packages for Selenium WebDriver and NUnit</li> </ul>"},{"location":"project-structure/","title":"Project Structure","text":"<p>The project structure is subject to change, refer to the latest source for more up-to-date structure. It is organized to separate test logic from page object definitions. Below is a generalized representation of project structure:</p> Folder Structure <pre><code>.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 HR Modules\n    \u251c\u2500\u2500 Common_Modules\n    \u251c\u2500\u2500 Docs\n    \u251c\u2500\u2500 Downloads\n    \u251c\u2500\u2500 Environment_URLs\n    \u2502   \u251c\u2500\u2500 endpoints-config.json\n    \u2502   \u251c\u2500\u2500 env-config.json\n    \u2502   \u251c\u2500\u2500 Environment.cs\n    \u2502   \u2514\u2500\u2500 URLs.cs\n    \u251c\u2500\u2500 PageObjects\n    \u2502   \u251c\u2500\u2500 LoginPage.cs\n    \u2502   \u251c\u2500\u2500 OnboardPage.cs\n    \u2502   \u251c\u2500\u2500 SettingsPage.cs\n    \u2502   \u251c\u2500\u2500 TimesheetPage.cs\n    \u2502   \u251c\u2500\u2500 &lt;Module&gt;\n    \u2502   \u2502   \u251c\u2500\u2500 &lt;PageName&gt;Page.cs\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 Reports\n    \u2502   \u251c\u2500\u2500 Report &lt;dd_MMM_yyy&gt;\n    \u2502   \u2502   \u251c\u2500\u2500 Screenshots\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500 Screenshot_&lt;H_mm_ss&gt;.png\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2502   \u251c\u2500\u2500 ExtentReport - &lt;dd_MMM_yy - hh_mm&gt;.html\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 TestData\n    \u2502   \u2502\u2500\u2500 Files\n    \u2502   \u2502   \u251c\u2500\u2500 SampleDoc.pdf\n    \u2502   \u2502   \u251c\u2500\u2500 Section3SampleDoc.jpg\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2502\u2500\u2500 LoginCredentials\n    \u2502   \u2502   \u251c\u2500\u2500 creds.json\n    \u2502   \u2502   \u2514\u2500\u2500 LoginCreds.cs\n    \u2502   \u2502\u2500\u2500 RandomNameGenerator\n    \u2502   \u2502   \u251c\u2500\u2500 names.json\n    \u2502   \u2502   \u2514\u2500\u2500 RandomEmployeeDetailsGenerator.cs\n    \u2502   \u251c\u2500\u2500 &lt;TestName&gt;_TestData.cs\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 TestPlans\n    \u2502   \u251c\u2500\u2500 &lt;TestModule&gt;\n    \u2502   \u2502   \u251c\u2500\u2500 &lt;TestName&gt;.cs\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 Utilities\n    \u2502   \u251c\u2500\u2500 RandomLcaGenerator\n    \u2502   \u2502   \u251c\u2500\u2500 LcaPdfFormMapper.cs\n    \u2502   \u2502   \u251c\u2500\u2500 LcaPdfFormStructure.cs\n    \u2502   \u2502   \u2514\u2500\u2500 RandomLcaDetailsGenerator.cs\n    \u2502   \u251c\u2500\u2500 AttributeExtensions.cs\n    \u2502   \u251c\u2500\u2500 BrowserOptions.cs\n    \u2502   \u251c\u2500\u2500 ExcelHelper.cs\n    \u2502   \u251c\u2500\u2500 ExcludeLeaveCalculation.cs\n    \u2502   \u251c\u2500\u2500 PdfHelper.cs\n    \u2502   \u251c\u2500\u2500 ReportsGenerationClass.cs\n    \u2502   \u251c\u2500\u2500 SoftAssertion.cs\n    \u2502   \u251c\u2500\u2500 TestExecutionHelper.cs\n    \u2502   \u251c\u2500\u2500 WaitHelpers.cs\n    \u2502   \u2514\u2500\u2500 WebElementExtensions.cs\n    \u251c\u2500\u2500 WebInteractions\n    \u2502   \u251c\u2500\u2500 I983Interactions.cs\n    \u2502   \u251c\u2500\u2500 I9Interactions.cs\n    \u2502   \u251c\u2500\u2500 LCAInteractions.cs\n    \u2502   \u251c\u2500\u2500 ProjectInteractions.cs\n    \u2502   \u251c\u2500\u2500 SignRequestInteractions.cs\n    \u2502   \u2514\u2500\u2500 TimesheetInteractions.cs\n    \u2502\u2500\u2500 HR Modules.csproj\n    \u2514\u2500\u2500 HR Modules.sln\n</code></pre>"},{"location":"reports-generation-class/","title":"ReportsGenerationClass","text":"<p>This abstract class is used to generate the test reports, it is inherited by <code>TestExecutionHelper</code>. It uses the <code>ExtentReports</code> library to generate the reports. The reports are generated in the <code>Reports</code> folder in the project directory.</p> <p>Below are the methods in the <code>ReportsGenerationClass</code> used to generate the reports:</p>"},{"location":"reports-generation-class/#members","title":"Members","text":""},{"location":"reports-generation-class/#setextenttest","title":"SetExtentTest","text":"<p>Sets the name for the current test instance - <code>ExtentTest</code> in the current <code>ExtentReport</code> instance.</p> Method SignatureParametersFunctionality <pre><code>public static void SetExtentTest(string name)\n</code></pre> Name Type Description <code>name</code> <code>string</code> The name of the test instance. <ol> <li>Set Test Name:<ul> <li>Sets the name of the current test instance in the report to the provided <code>name</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getextenttest","title":"GetExtentTest","text":"<p>Returns the instance of the <code>ExtentTest</code>.</p> Method SignatureReturnsFuntionality <pre><code>public static ExtentTest GetExtentTest()\n</code></pre> <p><code>ExtentTest</code>: The instance of the <code>ExtentTest</code>.</p> <ol> <li>Return Test Instance:<ul> <li>Returns the <code>_test</code> field, which is an instance of <code>ExtentTest</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getextentreport","title":"GetExtentReport","text":"<p>Returns the instance of the <code>ExtentReport</code>.</p> Method SignatureReturnsFunctionality <pre><code>public static ExtentReports GetExtentReport()\n</code></pre> <p><code>ExtentReports</code>: The instance of the <code>ExtentReports</code>.</p> <ol> <li>Return Report Instance:<ul> <li>Returns the <code>_extent</code> field, which is an instance of <code>ExtentReports</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getdrivers","title":"GetDrivers","text":"<p>Returns the list of driver instances of <code>WebDriver</code> for the current test.</p> Method SignatureReturnsFunctionality <pre><code>public static List&lt;IWebDriver&gt; GetDrivers()\n</code></pre> <p><code>List&lt;IWebDriver&gt;</code>: The list of driver instances.</p> <ol> <li>Return Drivers List:<ul> <li>Returns the <code>drivers</code> list, which contains instances of <code>IWebDriver</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getmethodbyname","title":"GetMethodByName","text":"<p>Gets a <code>MethodInfo</code> instance of the method by its name. Used in BeforeTest when the test method has a <code>TestCaseSourceAttribute</code></p> Method SignatureParametersReturnsFunctionality <pre><code>public static MethodInfo GetMethodByName(string methodName)\n</code></pre> Name Type Description <code>methodName</code> <code>string</code> The name of the method to retrieve. <p><code>MethodInfo</code>: The <code>MethodInfo</code> object representing the method, or <code>null</code> if the method is not found.</p> <ol> <li>Get Executing Assembly:<ul> <li>Retrieves the currently executing assembly using <code>Assembly.GetExecutingAssembly()</code>.</li> </ul> </li> <li>Get All Types:<ul> <li>Gets all types defined in the executing assembly using <code>executingAssembly.GetTypes()</code>.</li> </ul> </li> <li>Find Method by Name:<ul> <li>Iterates through each type to find a method with the specified name using <code>type.GetMethod(methodName)</code>.</li> <li>If the method is found, returns the corresponding <code>MethodInfo</code> object.</li> </ul> </li> <li>Return Null if Not Found:<ul> <li>If no method with the specified name is found, returns <code>null</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#exportfaileddetails","title":"ExportFailedDetails","text":"<p>Exports the failed test details to the report and log the status accordingly when the test either fails or is skipped.</p> Method SignatureFunctionality <pre><code>public static void ExportFailedDetails()\n</code></pre> <ol> <li>Get Test Status:<ul> <li>Retrieves the current test status from <code>TestContext.CurrentContext.Result.Outcome.Status</code>.</li> </ul> </li> <li>Handle Failed Tests:<ul> <li>If the test status is <code>TestStatus.Failed</code>:<ul> <li>Captures the current date and time.</li> <li>Generates a screenshot filename and captures a screenshot in base64 format.</li> <li>Creates a node in the report for failed details and network calls.</li> <li>Logs the failure details, including the method name, exception message, and stack trace.</li> <li>Logs relevant network call messages.</li> <li>Adds the screenshot and the URL before failure to the report.</li> </ul> </li> </ul> </li> <li>Handle Skipped Tests:<ul> <li>If the test status is <code>TestStatus.Skipped</code>:<ul> <li>Creates a node in the report for skipped details.</li> <li>Logs the reason for skipping, including the test name and exception message.</li> </ul> </li> </ul> </li> </ol>"},{"location":"reports-generation-class/#resetsubsteps","title":"ResetSubsteps","text":"<p>Resets or clears the substeps dictionary in the report.</p> Method SignatureFunctionality <pre><code>public static void ResetSubsteps()\n</code></pre> <ol> <li>Clear Substeps:<ul> <li>Clears the <code>_substepNodes</code> dictionary.</li> </ul> </li> <li>Clear Substep Count:<ul> <li>Clears the <code>_substepCounts</code> dictionary.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#flush","title":"Flush","text":"<p>Writes/updates the test information of your reporter to the destination type.</p> Method SignatureFuntionality <pre><code>public static void Flush()\n</code></pre> <ol> <li>Flush Report:<ul> <li>Calls <code>_extent.Flush()</code> to write/update the test information of the reporter to the destination type.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#setdriver","title":"SetDriver","text":"<p>Sets the driver instance of <code>WebDriver</code> for the current test and add the current driver to the list of drivers in case of multiple driver instances for a single test.</p> Method SignatureParametersReturnsFunctionality <pre><code>public static IWebDriver SetDriver(IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> <code>IWebDriver</code> The web driver instance to be set. <p><code>IWebDriver</code>: The updated web driver instance.</p> <ol> <li>Set Current Driver:<ul> <li>Assigns the provided <code>driver</code> to the <code>_driver</code> field.</li> </ul> </li> <li>Add to Drivers List:<ul> <li>Adds <code>_driver</code> to the <code>drivers</code> list.</li> </ul> </li> <li>Return Driver:<ul> <li>Returns the updated <code>_driver</code> instance.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#setup","title":"SetUp","text":"<p>Uses <code>OneTimeSetUp</code> attribute which runs this method once before all test methods in a test class. And this method adds all the necessary information of the current tests to the report.</p> Method SignatureFunctionality <pre><code>[OneTimeSetUp]\nprotected void SetUp()\n</code></pre> <ol> <li>Initialize Web Drivers:<ul> <li>Initializes <code>drivers</code> with a list containing <code>_driver</code>.</li> </ul> </li> <li>Set Trigger Source Information:<ul> <li>Constructs <code>triggerSourceText</code> using the current test name.</li> <li>Retrieves <code>triggerSource</code> from the Environment.</li> <li>Adds system information to the extent report based on the value of triggerSource:<ul> <li>\"Manual\" if <code>triggerSource</code> is \"MANUAL\".</li> <li>\"Hosted Agent Pipeline\" if <code>triggerSource</code> is \"PIPELINE\".</li> <li>\"Unknown\" if <code>triggerSource</code> is null or empty.</li> </ul> </li> </ul> </li> <li>Set Test Environment Information:<ul> <li>Adds system information to the extent report about the test environment using <code>Environment.Name</code> and <code>URLs.Instance.Login_URL</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#beforetest","title":"BeforeTest","text":"<p>Uses <code>OneTimeSetUp</code> attribute which runs this method once before all test methods in a test class. And this method handles the creation of a new test instance in the report along with output to console saying <code>Started Test: &lt;TestMethodName&gt; at &lt;CurrentDateTime&gt;</code> or <code>Retrying Test(s) at &lt;CurrentDateTime&gt;</code></p> Method SignatureFunctionality <pre><code>[OneTimeSetUp]\nprotected void BeforeTest()\n</code></pre> <ol> <li>Set Test Name:<ul> <li>Creates a new test instance in the report using <code>ExtentTest</code> and sets the test name to the current test method name (unless the test has a TestCaseSourceAttribute, in which case it uses the SetExtentTest method to set a custom name for each test case).</li> <li>Logs the start/retry of the test with the test name and start time to the console.</li> <li>Assigns the test instance to the <code>_test</code> field.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#aftertest","title":"AfterTest","text":"<p>Uses <code>OneTimeTearDown</code> attribute which runs this method once after all test methods in a test class. And this method handles the cleaning up of resources along with output to console saying <code>Ended Test: &lt;TestMethodName&gt; at &lt;CurrentDateTime&gt; with status &lt;TestStatus&gt;, ran for duration : &lt;TestDuration&gt;</code></p> Method SignatureFunctionality <pre><code>[OneTimeTearDown]\nprotected void AfterTest()\n</code></pre> <ol> <li>Get Test Status:     <ul> <li>Retrieves the test status from the <code>TestContext.CurrentContext.Result.Outcome.Status</code> property.</li> <li>If the test status is <code>Skipped</code>, logs the test status and duration.</li> <li>If the test status is <code>Failed</code>, logs the test status, duration, and exception message.</li> <li>If the test status is <code>Passed</code>, logs the test status and duration.</li> </ul> </li> <li>Export Failed Details:<ul> <li>Exports the failed test details to the report and logs the status accordingly when Test has either <code>Failed</code> or <code>Skipped</code>.</li> </ul> </li> <li>Reset/Clean Up Resources:<ul> <li>Calls <code>ResetSubsteps</code> to clear the substeps dictionary in the current report.</li> <li>Calls <code>Flush</code> to write/update the test information of the reporter to the destination type.</li> <li>Closes and quits all the driver instances in the current test and clears the list of drivers.</li> <li>Clears the list of errors in the <code>SoftAssertion</code> instance.</li> <li>Logs the end of the test with the test status, duration, and end time to the console.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#capture","title":"Capture","text":"<p>Captures the screenshot of the current page and adds it to the report in base64 format.</p> Method SignatureParametersReturnsFunctionality <pre><code>public static void Capture(IWebDriver driver, string screenShotName, string today)\n</code></pre> Name Type Description <code>driver</code> <code>IWebDriver</code> The web driver instance. <code>screenShotName</code> <code>string</code> The name of the screenshot. <code>today</code> <code>string</code> The current date. <p><code>string</code>: base64 string of the screenshot.</p> <ol> <li>Capture Screenshot:<ul> <li>Captures a screenshot of the current page using <code>driver.TakeScreenshot()</code>.</li> </ul> </li> <li>Save Screenshot:<ul> <li>Saves the screenshot to the <code>Reports</code> folder with a subdirectory from <code>Report today</code> the filename format <code>screenShotName.png</code>.</li> </ul> </li> <li>Return Screenshot Path:<ul> <li>Returns the path of the saved screenshot.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#logreport","title":"LogReport","text":"<p>Logs the message to the report with status Pass. Will be deprecated in a future version.</p> Method SignatureParametersFunctionality <pre><code>public void LogReport(string message)\n</code></pre> Name Type Description <code>message</code> <code>string</code> The message to log. <ol> <li>Log Message:<ul> <li>Logs the message to the report with status <code>Pass</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#loginfo","title":"LogInfo","text":"<p>Logs the message to the report with status Info. Will be deprecated a in a future version.</p> Method SignatureParametersFunctionality <pre><code>public void LogInfo(string message)\n</code></pre> Name Type Description <code>message</code> <code>string</code> The message to log. <ol> <li>Log Message:<ul> <li>Logs the message to the report with status <code>Info</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#logerror","title":"LogError","text":"<p>Logs the error messages from SoftAssertion to the console and to the report in a markup helper.</p> Method SignatureParametersFunctionality <pre><code>public void LogError(ExtentTest extentTest, string errorMessage)\n</code></pre> Name Type Description <code>extentTest</code> <code>ExtentTest</code> The extent test instance to log the error message. <code>errorMessage</code> <code>string</code> The error message to log. <ol> <li>Log Error Message:<ul> <li>Logs the error message to the console using <code>Console.WriteLine</code>.</li> </ul> </li> <li>Log Error to Report:<ol> <li>Markup Helper:<ul> <li>Uses <code>MarkupHelper.CreateCodeBlock</code> to create a code block with the error message(s).</li> </ul> </li> <li>Assertion Failures Node:<ul> <li>Creates a new node in <code>ExtentTest</code> instance with the name \"Assertion Failures\".</li> <li>Attaches the <code>MarkupHelper</code> to the \"Assertion Failures\" node and shows the failures in <code>Status.Info</code>.</li> </ul> </li> </ol> </li> </ol>"},{"location":"reports-generation-class/#getorcreatenode","title":"GetOrCreateNode","text":"<p>Retrieves an existing <code>ExtentTest</code> node by name or creates a new one as a child of the specified parent node if it does not exist.</p> Method SignatureParamtersReturnsFunctionality <pre><code>private static ExtentTest GetOrCreateNode(string nodeName, ExtentTest parentNode)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node to retrieve or create. <code>parentNode</code> <code>ExtentTest</code> The parent node for the new node. <p><code>ExtentTest</code>: The existing or newly created <code>ExtentTest</code> node.</p> <ol> <li>Check for Existing Node:<ul> <li>Checks if <code>_substepNodes</code> contains an entry for <code>nodeName</code>.</li> </ul> </li> <li>Return Existing Node:<ul> <li>If an entry exists, returns the existing <code>ExtentTest</code> node from <code>_substepNodes</code>.</li> </ul> </li> <li>Create New Node:<ul> <li>If no entry exists, creates a new <code>ExtentTest</code> node as a child of <code>parentNode</code> using <code>parentNode.CreateNode(nodeName)</code>.</li> <li>Adds the newly created node to <code>_substepNodes</code>.</li> </ul> </li> <li>Return New Node:<ul> <li>Returns the newly created <code>ExtentTest</code> node.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#logsubstep","title":"LogSubstep","text":"<p>The <code>LogSubstep</code> method logs details about a substep in a test to the specified node, capturing a screenshot if the substep fails.</p> Method SignatureParamtersFunctionality <pre><code>public void LogSubstep(string nodeName, string stepDetails, Status stepStatus? = null, string ssTitle = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the substep node. <code>stepDetails</code> <code>string</code> A description of the substep. <code>stepStatus</code> <code>Status?</code> The status of the substep. Default is <code>Status.Pass</code>. <code>ssTitle</code> <code>string</code> The title for the screenshot. <code>driver</code> <code>IWebDriver</code> The web driver instance. Default is <code>_driver</code>. <code>parentNodeName</code> <code>string</code> The name of the parent node. Default is <code>_test</code>. <ol> <li>Node and Parent Node Handling:<ul> <li>Determines the parent node (either <code>_test</code> or <code>parentNodeName</code>).</li> <li>Retrieves or creates the substep node (<code>nodeName</code>).</li> </ul> </li> <li>Substep Count Management:<ul> <li>Initializes or increments the substep count for <code>nodeName</code>.</li> </ul> </li> <li>Logging:<ul> <li>Logs the substep details with the status and a step label (e.g., \"Step - X: \").</li> </ul> </li> <li>Screenshot Capture:<ul> <li>If the substep status is neither <code>Pass</code> nor <code>Skip</code>, captures a screenshot using <code>driver</code> and adds it to the log entry.</li> </ul> </li> </ol> <p>This method provides systematic logging of substeps, ensuring each is recorded with specific details and an optional screenshot on failure.</p>"},{"location":"reports-generation-class/#getreportpath","title":"GetReportPath","text":"<p>The <code>GetReportPath</code> method generates a path for a report to be saved, ensuring necessary directories are created.</p> Method SignatureReturnsFunctionality <pre><code>public static string GetReportPath()\n</code></pre> <p><code>string</code>: The current report path in the format <code>\\\\Reports\\\\Report dd_MM_yyyy\\\\ExtentReport - d_MMM_yy - H_mm.html</code>.</p> <ol> <li> <p>Retrieve Current Directory:</p> <ul> <li>Gets the current directory using <code>Directory.GetCurrentDirectory()</code>.</li> </ul> </li> <li> <p>Determine Project Path:</p> <ul> <li>Constructs the project path by navigating up three levels from the current directory.</li> </ul> </li> <li> <p>Create Report Folder:</p> <ul> <li>Constructs the path for the <code>Reports</code> folder and ensures it is created using <code>Directory.CreateDirectory()</code>.</li> </ul> </li> <li> <p>Create Date-Specific Report Folder:</p> <ul> <li>Constructs a date-specific folder path within the <code>Reports</code> folder and ensures it is created.</li> </ul> </li> <li> <p>Generate Report Path:</p> <ul> <li>Constructs the report file path with a timestamp, ensuring it follows the format <code>ExtentReport - d_MMM_yy - H_mm.html</code>.</li> </ul> </li> <li> <p>Return Report Path:</p> <ul> <li>Returns the constructed report path.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#assignauthor","title":"AssignAuthor","text":"<p>The <code>AssignAuthor</code> method assigns the author name to the current test case.</p> Method SignatureParametersFunctionality <pre><code>public void AssignAuthor(string authorName)\n</code></pre> Name Type Description <code>authorName</code> <code>string</code> The author of the current test. <ol> <li>Assign Author:<ul> <li>Assigns the provided author name to the current test using <code>_test.AssignAuthor(authorName)</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#switchbrowser","title":"SwitchBrowser","text":"<p>The <code>SwitchBrowser</code> method switches the browser window to the specified window handle using webdriver instance in case of multiple webdriver instances.</p> Method SignatureParametersFunctionality <pre><code>public void SwitchBrowser(IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> <code>IWebDriver</code> The driver to switch to. <ol> <li>Switch Browser:<ul> <li>Uses <code>driver.SwitchTo().Window(driver.CurrentWindowHandle)</code> to switch to the specified browser window.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getnetworkcalls","title":"GetNetworkCalls","text":"<p>The <code>GetNetworkCalls</code> method retrieves and processes browser log entries, logging any failed network calls that meet specific criteria.</p> Method SignatureParametersFunctionality <pre><code>protected void GetNetworkCalls(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Default is <code>null</code>. <ol> <li> <p>Retrieve Browser Logs:</p> <ul> <li>Retrieves the browser logs using <code>_driver.Manage().Logs.GetLog(LogType.Browser)</code>.</li> </ul> </li> <li> <p>Process and Filter Logs:</p> <ul> <li>Iterates through each log entry.</li> <li>Checks if the log message contains the word \"Failed\" and does not contain \"mailhog\" or \"help.onblick\".</li> </ul> </li> <li> <p>Log Relevant Entries:</p> <ul> <li>If a log entry meets the criteria, writes the error message to <code>TestContext.Progress</code> and logs it as a substep using <code>LogSubstep(nodeName, log.Message, Status.Info)</code>.</li> </ul> </li> </ol> <p>Gets only failed network calls and is invoked when a test has failed.</p>"},{"location":"reports-generation-class/#getallnetworkcalls","title":"GetAllNetworkCalls","text":"<p>The <code>GetAllNetworkCalls</code> method retrieves and processes all browser log entries after ensuring there are no pending requests, logging any network calls that meet specific criteria.</p> Method SignatureParametersFunctionality <pre><code>protected void GetAllNetworkCalls(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Default is <code>null</code>. <ol> <li> <p>Wait for No Pending Requests:</p> <ul> <li>Calls <code>WaitForNoPendingRequests(_driver, 100)</code> to ensure there are no pending requests.</li> </ul> </li> <li> <p>Retrieve Browser Logs:</p> <ul> <li>Retrieves the browser logs using <code>_driver.Manage().Logs.GetLog(LogType.Browser)</code>.</li> </ul> </li> <li> <p>Process and Filter Logs:</p> <ul> <li>Iterates through each log entry.</li> <li>Checks if the log message does not contain \"mailhog\" or \"help.onblick\".</li> </ul> </li> <li> <p>Log Relevant Entries:</p> <ul> <li>If a log entry meets the criteria, writes the error message to <code>TestContext.Progress</code> and logs it as a substep using <code>LogSubstep(nodeName, log.Message)</code>.</li> </ul> </li> </ol> <p>Note: This method is not used as of now as <code>WaitForNoPendingRequests(_driver,100)</code> doesn't work as expected in onblick application</p>"},{"location":"reports/","title":"Generating Reports for Tests","text":"<p>We use the <code>ExtentReports</code> library to generate reports for our tests in the <code>Reports</code> directory. The reports are generated in HTML format and can be viewed in any browser.</p> <p>The <code>ExtentReports</code> library provides a simple API to create and manage reports. It also provides a way to log test steps and attach screenshots to the reports.</p>"},{"location":"reports/#adding-extentreports-to-the-project","title":"Adding ExtentReports to the Project","text":"<p>To add the <code>ExtentReports</code> NuGet package to the project, run the following command in the terminal:</p> <pre><code>dotnet add package ExtentReports\n</code></pre> <p>Note: This part is already done and you don't have to do it again.</p>"},{"location":"reports/#creating-a-report","title":"Creating a Report","text":"<p>To create a report, we need to create an instance of the <code>ExtentReports</code> class. We also need to create an instance of the <code>ExtentTest</code> class for each test case.</p> <p>Here is an example of how to create a report:</p> Example <pre><code>using AventStack.ExtentReports;\nusing AventStack.ExtentReports.Reporter;\n\nnamespace ExtentReportsDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create an instance of ExtentReports\n            var extent = new ExtentReports();\n\n            // Create an instance of ExtentHtmlReporter and attach it to the ExtentReports\n            var htmlReporter = new ExtentHtmlReporter(\"Reports\\\\TestReport.html\");\n            extent.AttachReporter(htmlReporter);\n\n            // Create a test\n            var test = extent.CreateTest(\"TestName\");\n\n            // Log test steps\n            test.Log(Status.Pass, \"Step 1\");\n            test.Log(Status.Pass, \"Step 2\");\n\n            // End the test\n            extent.Flush();\n        }\n    }\n}\n</code></pre> <p>Note: This is just an example of how to use the <code>ExtentReports</code> library, all of this is already configured in <code>ReportsGenerationClass</code> and <code>TestExecutionHelper</code></p>"},{"location":"reports/#using-pre-built-classes-to-generate-reports","title":"Using pre-built classes to Generate Reports","text":"<p>We have created a class called <code>ReportsGenerationClass</code> that generates reports for the tests. This class uses the <code>ExtentReports</code> library to create and manage reports.</p> <p>The <code>ReportsGenerationClass</code> class is inherited by the <code>TestExecutionHelper</code> which is in-turn inherited by all the tests.</p>"},{"location":"reports/#using-executestep-method","title":"Using <code>ExecuteStep</code> method","text":"<p>The <code>ExecuteStep</code> method is used to log test steps in the report. (Use the <code>ExecuteStep</code> method which uses dictionary as the other overload method shall be removed in a future version.)</p> <p>Let's consider our current step in the test is to login using the <code>Login</code> method. We can log this step in the report using the <code>ExecuteStep</code> method as shown below:</p> ExecuteStepDictionary <pre><code>ExecuteStep(() =&gt; Login(username, password), \"Login\", steps);\n</code></pre> <pre><code>Dictionary&lt;string, NodeDetails&gt; steps = new Dictionary&lt;string, NodeDetails&gt;()\n{\n    { \"Login\", new NodeDetails( nodeName: \"Login\", stepDetails: \"Login to the application\" } }\n};\n</code></pre> <p>Now, what the above method invocation would do is log the step \"Login\" in the report with the description \"Login to the application\" when the entire <code>Login()</code> method has finished executing. So, it'll essentially only log two steps one at the beginning of the method invocation and one at the end of its execution. To log any steps in between, we're going to pass the current <code>nodeName</code> inside our test step method and use the <code>LogSubstep</code> method to log the substeps.</p>"},{"location":"reports/#using-logsubstep-method","title":"Using <code>LogSubstep</code> method","text":"<p>The <code>LogSubstep</code> method is used to log substeps in the report. This method is used to log the steps that are part of a test step.</p> <p>Using the above example, let's consider that the <code>Login</code> method has the following steps:</p> <ol> <li>Enter username</li> <li>Enter password</li> <li>Click on the login button</li> <li>Verify the login</li> </ol> <p>We can log these steps in the report using the <code>LogSubstep</code> method and also modify the <code>Test Method</code> as shown below:</p> Login MethodTest Method <pre><code>public void Login(string username, string password, string nodeName)\n{\n    driver.FindElement(By.Id(\"username\")).SendKeys(username);\n    LogSubstep(nodeName: \"Enter username\", stepDetails: $\"Entered username - {username}\", parentNodeName:nodeName);\n    driver.FindElement(By.Id(\"password\")).SendKeys(password);\n    LogSubstep(nodeName: \"Enter password\", stepDetails: $\"Entered password - {password}\", parentNodeName:nodeName);\n    driver.FindElement(By.Id(\"login\")).Click();\n    LogSubstep(nodeName: \"Click on the login button\", stepDetails: \"Clicked on the login button\", parentNodeName:nodeName);\n    Assert.IsTrue(driver.FindElement(By.Id(\"welcome\")).Text.Contains(\"Welcome\"));\n    LogSubstep(nodeName: \"Verify the login\", stepDetails: \"Verified the login\", parentNodeName:nodeName);\n}\n</code></pre> <pre><code>ExecuteStep(() =&gt; Login(\"admin\", \"admin123\", \"Login\"), \"Login\", steps);\n</code></pre> <p>So, the above method invocation would log the steps \"Enter username\", \"Enter password\", \"Click on the login button\", and \"Verify the login\" in the report with the description provided when the respective step is executed.</p>"},{"location":"reports/#viewing-the-report","title":"Viewing the Report","text":"<p>The reports are generated in the <code>Reports</code> directory. To view the report, open the <code>Reports\\Report dd_MM_yyyy</code> folder and open the <code>ExtentReport - dd_MMM_yy - hh_mm.html</code> file in a browser.</p> <p>The report contains the following information:</p> <ol> <li>Test name</li> <li>Test status</li> <li>Test steps</li> <li>Test execution date and time</li> </ol>"},{"location":"reports/#good-practices","title":"Good Practices","text":"<ol> <li>Log all test steps: Log all the test steps in the report using the <code>ExecuteStep</code> and <code>LogSubstep</code> methods.</li> <li>Use meaningful step descriptions: Use meaningful step descriptions to make the report more informative.</li> <li>Use the <code>ExecuteStep</code> method: Use the <code>ExecuteStep</code> method to log the test steps in the report.</li> <li>Use the <code>LogSubstep</code> method: Use the <code>LogSubstep</code> method to log the substeps in the report.</li> <li>Use the <code>NodeDetails</code> class: Use the <code>NodeDetails</code> class to store the step details.</li> <li>Use the <code>Dictionary</code> class: Use the <code>Dictionary</code> class to store the test steps.</li> <li>Use typed variables: Use typed variables for step keys to ensure compile-time safety.</li> </ol>"},{"location":"reports/#report-example","title":"Report Example","text":"<p>Here is an example of a report generated by the <code>ExtentReports</code> library:</p> <p></p> <ul> <li>The top-left section shows the status of all tests in the current report.</li> <li>The top-right section shows the status of the test steps in all tests combined.</li> <li>The bottom section shows the details of each test, including the test name, status, and test steps.</li> <li>The test steps are color-coded based on their status (Pass, Fail, Fatal, Skip, Warning etc.,).</li> <li>The test steps can be expanded to view the details of each step.</li> </ul>"},{"location":"running-tests/","title":"Running Tests","text":"<p>Now that you've written your first test, let's run it. There are a couple ways you can run your test, one is using the <code>dotnet test</code> command in the CLI, and the other is using the Test Explorer in Visual Studio.</p>"},{"location":"running-tests/#how-to-run-tests","title":"How to Run Tests","text":"Using Test ExplorerThrough CLI <ol> <li>Open the Test Explorer by going to <code>Test</code> &gt; <code>Test Explorer</code> in the top menu.</li> <li>Click on the <code>Run All</code> button to run all the tests in the project.</li> <li>You can also run a single test by right-clicking on the test file and selecting <code>Run Tests</code>.     </li> </ol> <p><pre><code>dotnet test\n</code></pre> What this command will do is it will run all the tests in the current project. If you want to run a selected test, you can use the following command</p> <p><pre><code>dotnet test --filter FullyQualifiedName~TestName\n</code></pre> Example: if your namespace is <code>MyNamespace</code> and your test name is <code>MyTest</code>, you can run the test using the following command</p> <pre><code>dotnet test --filter FullyQualifiedName~MyNamespace.MyTest\n</code></pre>"},{"location":"running-tests/#viewing-test-results","title":"Viewing Test Results","text":"<ul> <li> <p>When you run your tests, you will see the output in the Test Explorer or in the CLI. The output will show you the status of each test, whether it passed or failed, and the time it took to run the test.</p> </li> <li> <p>If a test fails, the output will show you the reason for the failure, which will help you debug the issue.</p> </li> </ul> <p></p> <ul> <li>If all tests pass, you will see a green checkmark next to each test, indicating that the tests have passed successfully.</li> </ul> <p></p>"},{"location":"setting-up/","title":"Setting Up the Environment","text":""},{"location":"setting-up/#cloning-the-repository","title":"Cloning the Repository","text":"<p>Clone the repository (if you have access to it) and navigate to the project's directory. You can clone it in two ways, one using the <code>git clone</code> command and the <code>Visual Studio</code> interface.</p> Using Visual StudioUsing Terminal <ol> <li>Open Visual Studio.</li> <li>Click on <code>Clone a repository</code>.</li> <li>Enter the repository URL <code>https://onblickrigaps.visualstudio.com/Automation/_git/Selenium2.0</code>.</li> <li>Click on <code>Clone</code>.</li> </ol> <pre><code>git clone https://onblickrigaps.visualstudio.com/Automation/_git/Selenium2.0\n</code></pre> <p>After you finish cloning, the setup should be complete.</p>"},{"location":"setting-up/#changing-the-environment-tests-are-running-on","title":"Changing the environment tests are running on","text":"<p>In <code>Environment.cs</code> you can change the environment the tests are running on. The default environment is <code>demo</code>.</p> Environment.csAllowed values for Environment variable <pre><code>public static string Name =&gt; System.Environment.GetEnvironmentVariable(\"ENVIRONMENT\") ?? \"demo\";\n</code></pre> <p>Allowed values for <code>ENVIRONMENT</code> or <code>Environment.Name</code> are <code>demo</code>, <code>dev</code>, <code>prod</code>, <code>dev1</code>, <code>dev2</code>.</p>"},{"location":"setting-up/#setting-the-environment-variable","title":"Setting the Environment variable","text":"<p>This <code>ENVIRONMENT</code> variable is also used in the pipeline to control which environment the tests are being executed on.</p> <p></p>"},{"location":"shared-failure-context/","title":"SharedFailureContext","text":"<p>The shared failure context allows different failure handlers to share information, such as error messages.</p> <p>Below are the methods in <code>SharedFailureContext</code>:</p>"},{"location":"shared-failure-context/#methods","title":"Methods","text":""},{"location":"shared-failure-context/#initializeexceptiondetails","title":"InitializeExceptionDetails","text":"<p>Intializes the exception details in the shared failure context. It is used in <code>ExecuteStep</code> method in the catch block to initialize exception details after an exception was thrown.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void InitializeExceptionDetails(Exception ex)\n</code></pre> Name Type Description <code>ex</code> <code>Exception</code> The exception that was thrown. <ol> <li>Capture Method Name:<ul> <li>Retrieves the name of the method where the exception was thrown using <code>TestContext.CurrentContext.Test.MethodName</code>.</li> <li>Assigns the method name to the <code>FailedMethodName</code> field.</li> </ul> </li> <li>Extract Exception Message:<ul> <li>Extracts the message from the exception <code>ex</code>.</li> <li>Assigns the message to the <code>ExceptionMessage</code> field.</li> </ul> </li> <li>Process Stack Trace:<ul> <li>Processes the stack trace of the exception using the <code>GetStacktraceFailedLines</code> method.</li> <li>Assigns the processed stack trace to the <code>StackTrace</code> field.</li> </ul> </li> </ol> <p>Used in the catch block of the <code>ExecuteStep</code> and <code>ExecuteStepAndSuppress</code> methods and also in <code>CustomRetryAttribute</code> to initialize the exception details in the shared failure context. <pre><code>SharedFailureContext.InitializeExceptionDetails(ex);\n</code></pre></p>"},{"location":"shared-failure-context/#resetexceptiondetails","title":"ResetExceptionDetails","text":"<p>Resets the exception details in the shared failure context. It is used in <code>ExecuteStepAndSuppress</code> method in the finally block to reset exception details after the step has been executed.</p> Method SignatureFunctionalityUsage <pre><code>public static void ResetExceptionDetails()\n</code></pre> <ol> <li>Reset Method Name:<ul> <li>Resets the <code>FailedMethodName</code> field to <code>null</code>.</li> </ul> </li> <li>Reset Exception Message:<ul> <li>Resets the <code>ExceptionMessage</code> field to <code>null</code>.</li> </ul> </li> <li>Reset Stack Trace:<ul> <li>Resets the <code>StackTrace</code> field to <code>null</code>.</li> </ul> </li> </ol> <p>Used in the catch block of the <code>ExecuteStepAndSuppress</code> method and also in <code>CleanUp</code> of some tests that use the <code>TestCaseSourceAttribute</code> to reset the exception details in the shared failure context. <pre><code>SharedFailureContext.ResetExceptionDetails();\n</code></pre></p>"},{"location":"shared-failure-context/#getstacktracefailedlines","title":"GetStacktraceFailedLines","text":"<p>Processes the stack trace of the exception to extract the failed lines. It is used in the <code>InitializeExceptionDetails</code> method.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static string GetStacktraceFailedLines(string stackTrace)\n</code></pre> Name Type Description <code>stackTrace</code> <code>string</code> The stack trace of the exception. <ol> <li>Split Stack Trace:<ul> <li>Splits the input <code>stackTrace</code> string into individual lines using <code>\\n</code> as the delimiter.</li> <li>Stores the resulting lines in an array <code>lines</code>.</li> </ul> </li> <li>Initialize Updated Stacktrace:<ul> <li>Initializes an empty string <code>updatedStacktrace</code> to store the processed stack trace lines.</li> </ul> </li> <li>Process Each Line:<ul> <li>Iterates through each line in the <code>lines</code> array.</li> <li>For each line, uses a regular expression to match the file name and line number.</li> <li>Regex Pattern: <code>@\"(?&lt;file&gt;[^\\\\]+\\.cs):line (?&lt;line&gt;\\d+)\"</code></li> <li>Match Groups:<ul> <li><code>file</code>: Captures the file name ending with <code>.cs</code>.</li> <li><code>line</code>: Captures the line number where the failure occurred.</li> </ul> </li> </ul> </li> <li>Update Stacktrace:<ul> <li>If a match is found, extracts the file name and line number.</li> <li>Appends the formatted failure information to <code>updatedStacktrace</code> using HTML  tags for line breaks.</li> </ul> </li> <li>Return Result:<ul> <li>Returns the <code>updatedStacktrace</code> string containing the formatted failure information.</li> </ul> </li> </ol> <p>Used in the <code>InitializeExceptionDetails</code> method to process the stack trace of the exception. <pre><code>StackTrace = SharedFailureContext.GetStacktraceFailedLines(stackTrace);\n</code></pre></p>"},{"location":"soft-assertion/","title":"SoftAssertion","text":"<p>This class uses <code>Assert</code> class from NUnit framework to perform assertions but instead of failing the test immediately, it logs the assertion failures and continues with the test execution. The assertion failures are logged in the test report.</p>"},{"location":"soft-assertion/#normal-assertion","title":"Normal Assertion","text":"<p><pre><code>Assert.AreEqual(\"Actual\", \"Expected\");\n</code></pre> This Assertion throws an exception and stops the test execution if the actual and expected values are not equal.</p>"},{"location":"soft-assertion/#assertion-using-softassert","title":"Assertion using SoftAssert","text":"<p>Pseudo-code for SoftAssert is as follows:</p> <pre><code>Assert expected and actual values\nIf assertion fails, log the failure to report and continue with the test execution\n</code></pre>"},{"location":"soft-assertion/#methods","title":"Methods","text":""},{"location":"soft-assertion/#areequal","title":"AreEqual","text":"<p>Asserts that two objects are equal. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void AreEqual&lt;T&gt;(T expected, T actual, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>expected</code> <code>T</code> The expected value. <code>actual</code> <code>T</code> The actual value. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.AreEqual</code> to compare the <code>expected</code> and <code>actual</code> values.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#arenotequal","title":"AreNotEqual","text":"<p>Asserts that two objects are not equal. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void AreNotEqual&lt;T&gt;(T notExpected, T actual, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>notExpected</code> <code>T</code> The value that is not expected. <code>actual</code> <code>T</code> The actual value. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.AreNotEqual</code> to compare the <code>notExpected</code> and <code>actual</code> values.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#contains","title":"Contains","text":"<p>Asserts that a collection contains a specified element. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void Contains&lt;T&gt;(T[] expected, T actual, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>expected</code> <code>T[]</code> Array of expected values. <code>actual</code> <code>T</code> The actual value. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.Contains</code> to check if the <code>actual</code> value is present in the <code>expected</code> array.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#istrue","title":"IsTrue","text":"<p>Asserts that a condition is <code>true</code>. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void IsTrue(bool condition, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>condition</code> <code>bool</code> The condition to evaluate. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.IsTrue</code> to check if the <code>condition</code> is <code>true</code>.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#isfalse","title":"IsFalse","text":"<p>Asserts that a condition is <code>false</code>. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void IsFalse(bool condition, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>condition</code> <code>bool</code> The condition to evaluate. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.IsFalse</code> to check if the <code>condition</code> is <code>false</code>.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#adderrormessage","title":"AddErrorMessage","text":"<p>Adds an error message to the list of errors in the <code>SoftAssertion</code> instance, along with the current stack frame where the error occurred.</p> Method SignatureParametersFunctionality <pre><code>public void AddErrorMessage(string assertionErrorMessage, string customMessage = null, string stackFrameFailedLine = null)\n</code></pre> Name Type Description <code>assertionErrorMessage</code> <code>string</code> The error message from the assertion. <code>customMessage</code> <code>string</code> An optional custom message to include in the error details. <code>stackFrameFailedLine</code> <code>string</code> The stack frame information of the failed line. <ul> <li>Check Custom Message:<ul> <li>If <code>customMessage</code> is not null or empty and is not already part of <code>assertionErrorMessage</code>, adds a combined message to the <code>errors</code> list in the format: <code>{customMessage} - {assertionErrorMessage} {stackFrameFailedLine}</code>.</li> </ul> </li> <li>Add Assertion Error Message:<ul> <li>If <code>customMessage</code> is null, empty, or already part of <code>assertionErrorMessage</code>, adds the message to the <code>errors</code> list in the format: <code>{assertionErrorMessage} {stackFrameFailedLine}</code>.</li> </ul> </li> </ul>"},{"location":"soft-assertion/#geterrors","title":"GetErrors","text":"<p>Returns the list of errors in the <code>SoftAssertion</code> instance.</p> Method SignatureFunctionalityUsage <pre><code>public List&lt;string&gt; GetErrors()\n</code></pre> <ul> <li>Returns the list of errors.</li> </ul> <pre><code>List&lt;string&gt; errors = assert.GetErrors();\n</code></pre>"},{"location":"soft-assertion/#getstackframefailedline","title":"GetStackFrameFailedLine","text":"<p>Returns the current stack frame information of the failed line.</p> Method SignatureFunctionalityReturnsUsage <pre><code>private string GetStackFrameFailedLine()\n</code></pre> <ul> <li>Get Stack Frame:  <ul> <li>Uses <code>new StackFrame(2, true)</code> to get the parent stack frame as the current stack frame would be in the <code>SoftAssertion</code> class.</li> <li>Uses <code>new StackFrame(3, true)</code> to get the grandparent stack frame.</li> <li>Returns the stack frame information as a string combining both the parent and grandparent stack frames.</li> </ul> </li> </ul> <ul> <li>Returns the stack frame information of the failed line.</li> </ul> <p>Used in all assertion methods to get the stack frame information of the failed line. <code>`csharp string stackFrameFailedLine = GetStackFrameFailedLine();</code></p>"},{"location":"soft-assertion/#assertall","title":"AssertAll","text":"<p>Logs all the errors in the <code>SoftAssertion</code> instance to the report and clears the errors list.</p> Method SignatureParametersFunctionality <pre><code>public void AssertAll(ExtentTest extentTest)\n</code></pre> Name Type Description <code>extentTest</code> <code>ExtentTest</code> The ExtentTest instance where the errors should be logged. <ul> <li>Set ExtentTest:<ul> <li>Assigns the provided <code>extentTest</code> to the instance variable <code>this.extentTest</code>.</li> </ul> </li> <li>Retrieve Errors:<ul> <li>Calls <code>GetErrors()</code> to retrieve the list of errors.</li> </ul> </li> <li>Check and Process Errors:<ul> <li>If there are errors, iterates through the list and constructs a single message string from all errors:<ul> <li>Adds error to the message, ensuring that errors are indexed correctly.</li> <li>If an error contains the index (formatted as ${index + 1}) ), the index is adjusted or removed accordingly.</li> </ul> </li> </ul> </li> <li>Log Errors:<ul> <li>Calls <code>LogError(extentTest, message)</code> to log the constructed error message into the ExtentTest report using markup helpers for better formatting.</li> </ul> </li> <li>Clear Errors:<ul> <li>Clears the errors list.</li> </ul> </li> </ul>"},{"location":"soft-assertion/#usage-of-assertion-methods","title":"Usage of Assertion Methods","text":"<p>An <code>assert</code> object for <code>SoftAssert</code> class is created in the <code>ReportsGenerationClass</code> which will be inherited by <code>TestExecutionHelper</code> which in-turn is inherited by all test classes and this <code>assert</code> will be used to invoke the <code>SoftAssert</code> methods.</p> AreEqualIsTrueAddErrorMessage <pre><code>public class TestClass : TestExecutionHelper\n{\n    [Test]\n    public void TestMethod()\n    {\n        assert.AreEqual(\"Actual\", \"Expected\"));\n    }\n\n    [CleanUp]\n    public void TestCleanup()\n    {\n        assert.AssertAll(GetExtentTest());\n    }\n}\n</code></pre> <pre><code>public class TestClass : TestExecutionHelper\n{\n    [Test]\n    public void TestMethod()\n    {\n        assert.IsTrue(true);\n    }\n\n    [CleanUp]\n    public void TestCleanup()\n    {\n        assert.AssertAll(GetExtentTest());\n    }\n}\n</code></pre> <pre><code>public class TestClass : TestExecutionHelper\n{\n    [Test]\n    public void TestMethod()\n    {\n        assert.AddErrorMessage(\"Error Message\", \"Custom Message\");\n    }\n\n    [CleanUp]\n    public void TestCleanup()\n    {\n        assert.AssertAll(GetExtentTest());\n    }\n}\n</code></pre>"},{"location":"testexecution-helper/","title":"TestExecutionHelper","text":"<p>This abstract class is used to help with the execution of tests. It inherits <code>ReportsGenerationClass</code> and in turn is inherited by all test classes. It provides a method to execute a test step and automatically log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>.</p> <p>Below are the members of this class:</p>"},{"location":"testexecution-helper/#classes","title":"Classes","text":""},{"location":"testexecution-helper/#nodedetails","title":"NodeDetails","text":"<p>Represents the details of a node, including its name, step details, parent node name, and child relationships.</p> Class DefinitionParametersProperties <pre><code>public class NodeDetails(string nodeName, string stepDetails, string parentNodeName = null, bool hasChild = false, bool isChild = false)\n{\n    public string NodeName { get; set; } = nodeName;\n    public string StepDetails { get; set; } = stepDetails;\n    public string ParentNodeName { get; set; } = parentNodeName;\n    public bool HasChild { get; set; } = hasChild;\n    public bool IsChild { get; set; } = isChild;\n}\n</code></pre> Name Type Description <code>nodeName</code> string The name of the node. <code>stepDetails</code> string The details of the step associated with the node. <code>parentNodeName</code> string, optional The name of the parent node, if any. Default is <code>null</code>. <code>hasChild</code> bool, optional A value indicating whether the node has child nodes. Default is <code>false</code>. <code>isChild</code> bool, optional A value indicating whether the node is a child node. Default is <code>false</code>. Name Type Description <code>NodeName</code> string Gets or sets the name of the node. <code>StepDetails</code> string Gets or sets the details of the step associated with the node. <code>ParentNodeName</code> string Gets or sets the name of the parent node, if any. Default is <code>null</code>. <code>HasChild</code> bool Gets or sets a value indicating whether the node has child nodes. Default is <code>false</code>. <code>IsChild</code> bool Gets or sets a value indicating whether the node is a child node. Default is <code>false</code>."},{"location":"testexecution-helper/#usage","title":"Usage","text":"<p>The following code snippet demonstrates how to use the <code>NodeDetails</code> class:</p> Example 1Example 2 <pre><code>NodeDetails nodeDetails = new NodeDetails\n(\n    nodeName: \"Node1\",\n    stepDetails: \"Details for Step1\",\n    parentNodeName: \"ParentNode\",\n    hasChild: true,\n    isChild: false\n);\n</code></pre> <pre><code>NodeDetails nodeDetails = new NodeDetails\n(\n    nodeName: \"Node2\",\n    stepDetails: \"Details for Step2\"\n);\n</code></pre>"},{"location":"testexecution-helper/#methods","title":"Methods","text":""},{"location":"testexecution-helper/#executestep-without-dictionary","title":"ExecuteStep (without dictionary)","text":"<p>This method is used to execute a test step and log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>.</p> Method SignatureParametersFunctionality <pre><code>public void ExecuteStep(Action stepAction, string stepName, string stepDetails)\n</code></pre> Name Type Description <code>stepAction</code> Action The action to be executed in the test step. <code>stepName</code> string The name of the test step to be executed and logged to the report. <code>stepDetails</code> string The details of the test step to be logged to the current node in the report. <ol> <li>Log Step Start:<ul> <li>Logs the start of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the start time with the step name and details.</li> </ul> </li> <li>Execute Action:<ul> <li>Executes the <code>stepAction</code> delegate.</li> </ul> </li> <li>Log Step Completion:<ul> <li>If <code>stepDetails</code> is empty, assigns a default completion message.</li> <li>Logs the completion of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the end time with the step name and details.</li> </ul> </li> <li>Exception Handling:<ul> <li>Catches any exceptions thrown during the execution of the <code>stepAction</code>.</li> <li>Initializes exception details using <code>InitializeExceptionDetails</code>.</li> <li>Logs the failure of the step using <code>LogSubstep</code> with <code>Status.Fail</code>.</li> <li>Captures network calls using <code>GetNetworkCalls</code>.</li> <li>Resets substeps using <code>ResetSubsteps</code>.</li> <li>Rethrows the exception using <code>ExceptionDispatchInfo.Capture(ex).Throw()</code>.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_1","title":"Usage","text":"<p>Say <code>MyClass.MyMethod()</code> is the action to be executed in the test step. The following code snippet demonstrates how to use the <code>ExecuteStep</code> method:</p> Example <pre><code>ExecuteStep(() =&gt; MyClass.MyMethod(),\n            stepName: \"MyMethod\",\n            stepDetails: \"Demonstrates the usage of ExecuteStep method.\");\n</code></pre>"},{"location":"testexecution-helper/#executestep","title":"ExecuteStep","text":"<p>This method is used to execute a test step and log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>. An overload to the previous method taking a dictionary of string and <code>NodeDetails</code> parameter to log subsequent steps as skipped after a test fails before completion.</p> Method SignatureParametersFunctionality <pre><code>public void ExecuteStep(Action stepAction, string stepKey, Dictionary&lt;string, NodeDetails&gt; stepInfo)\n</code></pre> Name Type Description <code>stepAction</code> Action The action to be executed in the test step. <code>stepKey</code> string The key to be used to log the test step in the report. <code>stepInfo</code> Dictionary The dictionary of all steps to be logged in the report. <ol> <li>Retrieve Step Information:<ul> <li>Attempts to retrieve <code>NodeDetails</code> for the given <code>stepKey</code> from the <code>stepInfo</code> dictionary.</li> <li>Throws a <code>KeyNotFoundException</code> if the <code>stepKey</code> is not found.</li> </ul> </li> <li>Extract Step Details:<ul> <li>Extracts <code>stepName</code>, <code>stepDetails</code>, <code>parentStepName</code>, <code>hasChild</code>, and <code>isChild</code> from the retrieved <code>NodeDetails</code>.</li> <li>Determines the <code>currentNodeName</code> based on whether the step is a child.</li> </ul> </li> <li>Log Step Start:<ul> <li>Logs the start of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the start time with the step name and details.</li> </ul> </li> <li>Execute Action:<ul> <li>Executes the <code>stepAction</code> delegate.</li> </ul> </li> <li>Log Step Completion:<ul> <li>If <code>stepDetails</code> is empty, assigns a default completion message.</li> <li>Logs the completion of the step using <code>LogSubstep</code>.</li> <li>Removes the completed step from the <code>stepInfo</code> dictionary using <code>RemoveStep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the end time with the step name and details.</li> </ul> </li> <li>Exception Handling:<ul> <li>Catches any exceptions thrown during the execution of the <code>stepAction</code>.</li> <li>Initializes exception details using <code>InitializeExceptionDetails</code>.</li> <li>Logs the failure of the step using <code>LogSubstep</code> with <code>Status.Fail</code>.</li> <li>Removes the failed step from the <code>stepInfo</code> dictionary using <code>RemoveStep</code>.</li> <li>Logs the skipping of remaining steps using LogSubstep with <code>Status.Skip</code>.</li> <li>Captures network calls using <code>GetNetworkCalls</code>.</li> <li>Resets substeps using <code>ResetSubsteps</code>.</li> <li>Rethrows the exception using <code>ExceptionDispatchInfo.Capture(ex).Throw()</code>.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_2","title":"Usage","text":"<p>Say MyClass.MyMethod() is the action to be executed in the test step. The following code snippet demonstrates how to use the <code>ExecuteStep</code> method:</p> Example <pre><code>Dictionary&lt;string, NodeDetails&gt; stepInfo = new Dictionary&lt;string, NodeDetails&gt;\n{\n    { \"Step1\", new NodeDetails { NodeName = \"Step1\", StepDetails = \"Details for Step1\" } },\n    { \"Step2\", new NodeDetails { NodeName = \"Step2\", StepDetails = \"Details for Step2\" } }\n};\n\nExecuteStep(() =&gt; MyClass.MyMethod(),\n            stepKey: \"Step1\",\n            stepInfo: stepInfo);\n</code></pre>"},{"location":"testexecution-helper/#executestepandsuppress","title":"ExecuteStepAndSuppress","text":"<p>This method is used to execute a test step and log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>. It suppresses the exception thrown during the execution of the test step and continues with the execution of the subsequent steps.</p> Method SignatureParametersFunctionality <pre><code>public void ExecuteStepAndSuppress(Action stepAction, string stepName, string stepDetails = null)\n</code></pre> Name Type Description <code>stepAction</code> Action The action to be executed in the test step. <code>stepName</code> string The name of the test step to be executed and logged to the report. <code>stepDetails</code> string The details of the test step to be logged to the current node in the report. Default is <code>null</code>. <ol> <li>Log Step Start:<ul> <li>Logs the start of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the start time with the step name and details.</li> </ul> </li> <li>Execute Action:<ul> <li>Executes the <code>stepAction</code> delegate.</li> </ul> </li> <li>Log Step Completion:<ul> <li>If <code>stepDetails</code> is empty, logs a default completion message using <code>LogSubstep</code>.</li> <li>Otherwise, logs the provided <code>stepDetails</code> using <code>LogSubstep</code>.</li> </ul> </li> <li>Exception Handling (Suppression):<ul> <li>Catches any exceptions thrown during the execution of the <code>stepAction</code>.</li> <li>Captures network calls using <code>GetNetworkCalls</code> with <code>stepName</code>.</li> <li>Initializes exception details using <code>InitializeExceptionDetails</code>.</li> <li>Logs the failure of the step using LogSubstep with <code>Status.Skip</code>.</li> <li>Logs detailed failure information, including the failed method name, exception message, and stack trace, using <code>LogSubstep</code> with <code>Status.Skip</code>.</li> <li>Resets exception details using <code>ResetExceptionDetails</code>.</li> </ul> </li> <li>Log Step End:<ul> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the end time with the step name and details.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_3","title":"Usage","text":"<p>Say MyClass.MyMethod() is the action to be executed in the test step. The following code snippet demonstrates how to use the <code>ExecuteStepAndSuppress</code> method:</p> Example <pre><code>ExecuteStepAndSuppress(() =&gt; MyClass.MyMethod(),\n                        stepName: \"MyMethod\",\n                        stepDetails: \"Demonstrates the usage of ExecuteStepAndSuppress method.\");\n</code></pre>"},{"location":"testexecution-helper/#removestep","title":"RemoveStep","text":"<p>This method is used to remove a step from the dictionary of steps to be logged in the report.</p> Method SignatureParametersFunctionality <pre><code>public void RemoveStep(string stepKey, Dictionary&lt;string, NodeDetails&gt; stepInfo)\n</code></pre> Name Type Description <code>stepKey</code> string The key of the step to be removed from the dictionary of steps to be logged in the report. <code>stepInfo</code> Dictionary The dictionary of all steps to be logged in the report. <ol> <li>Find Step to Remove:<ul> <li>Retrieves the step to remove from the <code>stepInfo</code> dictionary based on the provided <code>stepKey</code>.</li> <li>Uses <code>FirstOrDefault</code> to find the matching key-value pair.</li> </ul> </li> <li>Remove Step if No Children:<ul> <li>If the step to remove is found and it has no children (<code>HasChild</code> is false), it removes the step from the <code>stepInfo</code> dictionary.</li> </ul> </li> <li>Check for Orphaned Parent:<ul> <li>Counts the number of sibling steps for the parent node of the step being removed.</li> <li>If there are no sibling steps and the step being removed is a child (<code>IsChild</code> is true), it attempts to remove the parent step from the <code>stepInfo</code> dictionary.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_4","title":"Usage","text":"<p>The following code snippet demonstrates how to use the <code>RemoveStep</code> method:</p> Example <pre><code>Dictionary&lt;string, NodeDetails&gt; stepInfo = new Dictionary&lt;string, NodeDetails&gt;\n{\n    { \"step1\", new NodeDetails { NodeName = \"Step1\", StepDetails = \"Detail1\", ParentNodeName = null, HasChild = true, IsChild = false } },\n    { \"step2\", new NodeDetails { NodeName = \"Step2\", StepDetails = \"Detail2\", ParentNodeName = \"Step1\", HasChild = false, IsChild = true } },\n    // Add more steps as needed\n};\n\nRemoveStep(\"step2\", stepInfo);\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>If you have any questions or issues, please contact us at automationteam@onblick.com.</p>"},{"location":"troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<p>To help us resolve your issue quickly, please include the following information when reporting:</p> <ul> <li>Description: A clear and concise description of the problem.</li> <li>Steps to Reproduce: Step-by-step instructions to reproduce the issue.</li> <li>Expected Behavior: What you expected to happen.</li> <li>Actual Behavior: What actually happened.</li> <li>Screenshots/Logs: Any relevant screenshots or log files.</li> </ul>"},{"location":"troubleshooting/#contact-information","title":"Contact Information","text":"<ul> <li>Project related Issues: Please open an issue on this repository.</li> <li>General Questions/Issues: Contact us at qateam@onblick.com.</li> </ul>"},{"location":"troubleshooting/#faqs","title":"FAQs","text":"<ul> <li> <p>What is the purpose of this project?</p> <ul> <li>The purpose of this project is to automate the testing of the OnBlick application.</li> </ul> </li> <li> <p>What is the technology stack used in this project?</p> <ul> <li>This project uses Selenium WebDriver, C#, NUnit, Page Object Model, and Extent Reports.</li> </ul> </li> <li> <p>How do I run the tests?</p> <ul> <li>Please refer to the Running Tests section.</li> </ul> </li> <li> <p>How do I view the test results?</p> <ul> <li>Please refer to the Viewing Test Results section.</li> </ul> </li> <li> <p>How do I generate test reports?</p> <ul> <li>Please refer to the Generating Test Reports section.</li> </ul> </li> <li> <p>How do I write my own tests?</p> <ul> <li>Please refer to the Writing Tests section.</li> </ul> </li> <li> <p>How do I push my changes to the repository?</p> <ul> <li>Please refer to the Git Workflow section.</li> </ul> </li> <li> <p>How do I debug failing tests?</p> <ul> <li>Please refer to the Debugging Tests section.</li> </ul> </li> </ul>"},{"location":"urls/","title":"URLs","text":"<p>This class is used to store the URLs of the application under test. The URLs are stored as static endpoints in <code>endpoints-config.json</code> with a dynamic baseurl that depends on the Environment and can be accessed using the <code>Instance</code>.</p> URLs.cs <pre><code>public static URLs Instance =&gt; _instance.Value;\n...\n...\npublic string Login_URL =&gt; GetUrl(_mainDomain, nameof(Login_URL));\n</code></pre>"},{"location":"urls/#usage","title":"Usage","text":"Example 1Example 2 <pre><code>var loginUrl = URLs.Instance.Login_URL;\n</code></pre> <pre><code>var workforceUrl = URLs.Instance.Workforce_URL;\n</code></pre>"},{"location":"wait-helpers/","title":"WaitHelpers","text":"<p>The <code>WaitHelpers</code> class provides various methods for waiting for certain conditions using Selenium WebDriver.</p>"},{"location":"wait-helpers/#methods","title":"Methods","text":""},{"location":"wait-helpers/#waitforelementtobevisible","title":"WaitForElementToBeVisible","text":"<p>Waits for an element to be visible on the page.</p> Method SignatureParameters <pre><code>public static void WaitForElementToBeVisible(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be visible. Default is 60 seconds."},{"location":"wait-helpers/#usage","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForElementToBeVisible(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForElementToBeVisible(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforinvisibilityofelement","title":"WaitForInvisibilityOfElement","text":"<p>Waits for an element to be invisible on the page.</p> Method SignatureParameters <pre><code>public static void WaitForInvisibilityOfElement(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be invisible. Default is 60 seconds."},{"location":"wait-helpers/#usage_1","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForInvisibilityOfElement(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForInvisibilityOfElement(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre> <p>Note:This method will be removed in a future version, use WaitForInvisibilityOfElements instead</p>"},{"location":"wait-helpers/#waitforelementtobeclickable","title":"WaitForElementToBeClickable","text":"<p>Waits for an element to be clickable (checks if element is enabled) on the page.</p> Method SignatureParameters <pre><code>public static void WaitForElementToBeClickable(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be clickable. Default is 60 seconds."},{"location":"wait-helpers/#usage_2","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForElementToBeClickable(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForElementToBeClickable(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforelementtoexist","title":"WaitForElementToExist","text":"<p>Waits for an element to exist on the page.</p> Method SignatureParameters <pre><code>public static void WaitForElementToExist(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to exist. Default is 60 seconds."},{"location":"wait-helpers/#usage_3","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForElementToExist(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForElementToExist(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforinvisibilityofelements","title":"WaitForInvisibilityOfElements","text":"<p>Waits for all elements matching the locator to be invisible on the page.</p> Method SignatureParameters <pre><code>public static void WaitForInvisibilityOfElements(IWebDriver driver, By element, int t = 80)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the elements to wait for. <code>t</code> int The maximum time to wait for the elements to be invisible. Default is 80 seconds."},{"location":"wait-helpers/#usage_4","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForInvisibilityOfElements(driver, By.ClassName(\"elementClass\"), 10);\n</code></pre> <pre><code>WaitForInvisibilityOfElements(driver, By.ClassName(\"elementClass\")); //defaults to 80 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforurltocontain","title":"WaitForUrlToContain","text":"<p>Waits for the URL to contain the specified string.</p> Method SignatureParameters <pre><code>public static void WaitForUrlToContain(IWebDriver driver, string url, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>url</code> string The string to wait for in the URL. <code>time</code> int The maximum time to wait for the URL to contain the string. Default is 60 seconds."},{"location":"wait-helpers/#usage_5","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForUrlToContain(driver, \"example.com\", 10);\n</code></pre> <pre><code>WaitForUrlToContain(driver, \"example.com\"); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitfornewtab","title":"WaitForNewTab","text":"<p>Waits for a new tab to be opened.</p> Method SignatureParameters <pre><code>public static void WaitForNewTab(IWebDriver driver, int tabCount, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>tabCount</code> int Initial number of tabs before performing an action that presumably opens a new tab. <code>time</code> int The maximum time to wait for a new tab to be opened. Default is 60 seconds."},{"location":"wait-helpers/#usage_6","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForNewTab(driver, 1, 10);\n</code></pre> <pre><code>WaitForNewTab(driver, 1); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitfortabclose","title":"WaitForTabClose","text":"<p>Waits for a tab to be closed.</p> Method SignatureParameters <pre><code>public static void WaitForTabClose(IWebDriver driver, int tabCount, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>tabCount</code> int Initial number of tabs before performing an action that presumably closes a tab. <code>time</code> int The maximum time to wait for a tab to be closed. Default is 60 seconds."},{"location":"wait-helpers/#usage_7","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForTabClose(driver, 2, 10);\n</code></pre> <pre><code>WaitForTabClose(driver, 2); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforfiledownload","title":"WaitForFileDownload","text":"<p>Waits for a file to be downloaded.</p> Method SignatureParameters <pre><code>public static void WaitForFileDownload(IWebDriver driver, string downloadPath, int initialFileCount, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>downloadPath</code> string The path where the file is expected to be downloaded. <code>initialFileCount</code> int Initial number of files in the download path before performing an action that presumably downloads a file. <code>time</code> int The maximum time to wait for a file to be downloaded. Default is 60 seconds."},{"location":"wait-helpers/#usage_8","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForFileDownload(driver, \"C:\\\\Downloads\", 0, 10);\n</code></pre> <pre><code>WaitForFileDownload(driver, \"C:\\\\Downloads\", 0); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforanyelementtobevisible","title":"WaitForAnyElementToBeVisible","text":"<p>Waits for any elements identified with the given locator to be visible on the page. Note: Used only when there are multiple matching elements with the given locator, and we have to wait for an element whose index isn't 1 to be visible.</p> Method SignatureParameters <pre><code>public static void WaitForAnyElementToBeVisible(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be visible. Default is 60 seconds."},{"location":"wait-helpers/#usage_9","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForAnyElementToBeVisible(driver, By.ClassName(\"elementClass\"), 10);\n</code></pre> <pre><code>WaitForAnyElementToBeVisible(driver, By.ClassName(\"elementClass\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitfornopendingrequests","title":"WaitForNoPendingRequests","text":"<p>Waits for all pending network requests to complete.</p> Method SignatureParameters <pre><code>public static void WaitForNoPendingRequests(IWebDriver driver, int time)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>time</code> int The maximum time to wait for all pending network requests to complete."},{"location":"wait-helpers/#usage_10","title":"Usage","text":"Example <pre><code>WaitForNoPendingRequests(driver, 60);\n</code></pre> <p>Note: This method doesn't work in Onblick2.0 as there are always pending signalr calls, so it is unused for now.</p>"},{"location":"webelement-extensions/","title":"WebElementExtensions","text":"<p><code>WebElementExtensions</code> is a collection of extension methods for Selenium's IWebElement interface. It is designed to make it easier to work with Selenium's IWebElement interface by providing a set of extension methods that make it easier to interact with elements on a page.</p>"},{"location":"webelement-extensions/#methods","title":"Methods","text":"<p>Below are the extension methods available in <code>WebElementExtensions</code>:</p>"},{"location":"webelement-extensions/#iclick","title":"IClick","text":"<p>The <code>IClick</code> method is an extension method that clicks on an element. It is equivalent to calling the <code>Click</code> method on an IWebElement object. <code>IClick</code> - Interception Click handler that manages intercepted exceptions.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void IClick(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to click on. <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Retries: The method attempts to click the element up to 5 times (<code>maxRetries</code>), incrementing the retry count with each attempt.</li> <li>Exception Handling:<ul> <li>Catches <code>ElementClickInterceptedException</code> when the click is obstructed.</li> <li>Identifies the intercepting element using GetInterceptingElement and takes specific actions based on its type:<ul> <li>Modal Frames: Switches to the modal frame and clicks the close button.</li> <li>IFrames: Clicks the close button for the iframe.</li> <li>Overlay Elements: Clicks on an overlay close button.</li> <li>Draggable Elements: Moves the intercepting element out of the way using MoveInterceptingElement, retrying if necessary.</li> <li>Scrollable Elements: Scrolls the calendar or similar elements to the left.</li> </ul> </li> </ul> </li> <li>Error Handling: If the maximum number of retries is exceeded, the exception is re-thrown to be handled elsewhere.</li> <li>Scroll Handling: Ensures the element is in view before attempting the click by scrolling to it if necessary.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.IClick(driver);\n</code></pre>"},{"location":"webelement-extensions/#getinterceptingelement","title":"GetInterceptingElement","text":"<p><code>GetInterceptingElement</code> is a private method used in <code>IClick</code> which extracts the identifier of the element that is intercepting the click from an exception message.</p> Method SignatureParametersReturn Value <pre><code>private static string GetInterceptingElement(Exception ex)\n</code></pre> Name Type Description <code>ex</code> Exception The exception thrown when the click is intercepted. <p>The method returns the identifier of the element that is intercepting the click.</p>"},{"location":"webelement-extensions/#moveinterceptingelement","title":"MoveInterceptingElement","text":"<p>The <code>MoveInterceptingElement</code> method is an extension method that moves an intercepting element out of the way. It is used in the <code>IClick</code> method to move draggable elements that are obstructing the click.</p> Method SignatureParameters <pre><code>private static void MoveInterceptingElement(this IWebElement interceptingElement, IWebDriver driver)\n</code></pre> Name Type Description <code>interceptingElement</code> IWebElement The element that is obstructing the click. <code>driver</code> IWebDriver The WebDriver instance."},{"location":"webelement-extensions/#scrolltotheleft","title":"ScrollToTheLeft","text":"<p>The <code>ScrollToTheLeft</code> method is used to scroll to the leftmost of the page within the scrollable element on the webpage.</p> Method SignatureParametersUsage <pre><code>public static void ScrollToTheLeft(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll. <code>driver</code> IWebDriver The WebDriver instance. <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ScrollToTheLeft(driver);\n</code></pre>"},{"location":"webelement-extensions/#scrolltotheright","title":"ScrollToTheRight","text":"<p>The <code>ScrollToTheRight</code> method is used to scroll to the rightmost of the page within the scrollable element on the webpage.</p> Method SignatureParametersUsage <pre><code>public static void ScrollToTheRight(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll. <code>driver</code> IWebDriver The WebDriver instance. <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ScrollToTheRight(driver);\n</code></pre>"},{"location":"webelement-extensions/#igethexcolor","title":"IGetHexColor","text":"<p>The <code>IGetHexColor</code> method is an extension method that retrieves the hex color of the element. It is equivalent to calling the <code>GetCssValue</code> method on an IWebElement object. It has two overload methods, one that returns the hex color as a string and another that validates the hex color with an expected value.</p> Method Signature 1Method Signature 2ParametersFunctionalityUsage 1Usage 2 <pre><code>public static string IGetHexColor(this IWebElement element, string colorLocator)\n</code></pre> <pre><code>public static void IGetHexColor(this IWebElement element, string colorLocator, string expectedHex)\n</code></pre> <p><code>expectedHex</code> is only in the second method signature.</p> Name Type Description <code>element</code> IWebElement The element to get the color from. <code>colorLocator</code> string The CSS locator for the color. <code>expectedHex</code> string The expected hex color value. <ol> <li>Get Color: Retrieves the color of the element using the CSS locator.</li> <li>Hex Conversion: Converts the color to a hex value.</li> <li>Validation: Compares the hex value with the expected hex value if provided.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nstring hexColor = element.IGetHexColor(\"color\");\n</code></pre> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.IGetHexColor(\"color\", \"#000000\");\n</code></pre>"},{"location":"webelement-extensions/#highlight","title":"Highlight","text":"<p>The <code>Highlight</code> method is an extension method that highlights an element on the page. It is used to visually identify the element on the page.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void Highlight(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to highlight. <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>JavaScript Execution: Executes a JavaScript script to highlight the element.</li> <li>Styling: Applies a red border around the element to highlight it.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Highlight(driver);\n</code></pre>"},{"location":"webelement-extensions/#unhighlight","title":"Unhighlight","text":"<p>The <code>Unhighlight</code> method is an extension method that removes the highlight from an element on the page. It is used to remove the visual identification of the element.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void Unhighlight(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to unhighlight. <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>JavaScript Execution: Executes a JavaScript script to remove the highlight from the element.</li> <li>Styling: Removes the red border around the element.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Unhighlight(driver);\n</code></pre>"},{"location":"webelement-extensions/#scrollto","title":"ScrollTo","text":"<p>The <code>ScrollTo</code> method is an extension method that scrolls to an element on the page. It is used to bring the element into view.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ScrollTo(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll to. <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>JavaScript Execution: Executes a JavaScript script to scroll to the element.</li> <li>Scrolling: Scrolls the page to bring the element into view.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ScrollTo(driver);\n</code></pre>"},{"location":"webelement-extensions/#scroll","title":"Scroll","text":"<p>The <code>Scroll</code> method is an extension method that scrolls the page by a specified number of pixels. It is used to scroll the page up or down by a specific amount.</p> Method SignatureParametersFunctionalityUsageExample 2 <pre><code>public static void Scroll(this IWebElement element, IWebDriver driver, string direction, int distance)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll. <code>driver</code> IWebDriver The WebDriver instance. <code>direction</code> string The direction to scroll in (<code>up</code> or <code>down</code>). <code>distance</code> int The number of pixels to scroll by. <ol> <li>JavaScript Execution: Executes a JavaScript script to scroll the page.</li> <li>Scrolling: Scrolls the page up or down by the specified number of pixels.</li> <li>Direction: Determines the direction of the scroll based on the input parameter.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Scroll(driver, \"down\", 500);\n</code></pre> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Scroll(driver, \"up\", 500);\n</code></pre>"},{"location":"webelement-extensions/#dateentry","title":"DateEntry","text":"<p>The <code>DateEntry</code> method is an extension method that enters a date into a date picker element. It is used to automate the entry of dates into date picker elements.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void DateEntry(this IWebElement element, IWebDriver driver, string date)\n</code></pre> Name Type Description <code>element</code> IWebElement The date picker element. <code>driver</code> IWebDriver The WebDriver instance. <code>date</code> string The date to enter in the format <code>MM/dd/yyyy</code>. <ol> <li>JavaScript Execution: Executes a JavaScript script to enter the date into the date picker.</li> <li>Date Entry: Enters the date into the date picker element.</li> <li>Date Format: The date should be in the format <code>MM/dd/yyyy</code>.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.DateEntry(driver, \"12/31/2022\");\n</code></pre>"},{"location":"webelement-extensions/#clearandenter","title":"ClearAndEnter","text":"<p>The <code>ClearAndEnter</code> method is an extension method that clears the existing text in an input field and enters new text. It is used to automate the clearing and entering of text into input fields.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ClearAndEnter(this IWebElement element, IWebDriver driver, string text)\n</code></pre> Name Type Description <code>element</code> IWebElement The input field element. <code>driver</code> IWebDriver The WebDriver instance. <code>text</code> string The text to enter into the input field. <ol> <li>Clearing: Clears the existing text in the input field.</li> <li>Entering: Enters the new text into the input field.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ClearAndEnter(driver, \"Text to enter\");\n</code></pre>"},{"location":"webelement-extensions/#clickleft","title":"ClickLeft","text":"<p>The <code>ClickLeft</code> method is an extension method that clicks on the left side of an element. It is used to simulate a click on the left side of an element.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ClickLeft(this IWebElement element, IWebDriver driver, int percentage)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to click on. <code>driver</code> IWebDriver The WebDriver instance. <code>percentage</code> int The percentage of the element's width to click on. <ol> <li>Actions: Creates an Actions object to perform the click action.</li> <li>Click Location: Simulates a click on the left side of the element.</li> <li>Percentage: Determines the location of the click based on the percentage of the element's width.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ClickLeft(driver, 20);\n</code></pre>"},{"location":"webelement-extensions/#hover","title":"Hover","text":"<p>The <code>Hover</code> method is an extension method that hovers over an element. It is used to simulate a mouse hover action on an element.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void Hover(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to hover over. <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Actions: Creates an Actions object to perform the hover action.</li> <li>Hovering: Hovers over the element.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Hover(driver);\n</code></pre>"},{"location":"webelement-extensions/#ctrlclick","title":"CtrlClick","text":"<p>The <code>CtrlClick</code> method is an extension method that performs a Ctrl+Click action on an element. It is used to simulate a Ctrl+Click action on an element which opens the hyperlink of an element in a new tab.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void CtrlClick(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to Ctrl+Click on. <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Actions: Creates an Actions object to perform the Ctrl+Click action.</li> <li>Ctrl+Click: Performs the Ctrl+Click action on the element.</li> <li>New Tab: Opens the hyperlink of the element in a new tab.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.CtrlClick(driver);\n</code></pre>"},{"location":"webelement-extensions/#opennewtab","title":"OpenNewTab","text":"<p>The <code>OpenNewTab</code> method is an extension method that opens a new tab.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void OpenNewTab(this IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>JavaScript Execution: Executes a JavaScript script to open a new tab.</li> <li>New Tab: Opens a new tab in the browser.</li> </ol> <pre><code>driver.OpenNewTab();\n</code></pre>"},{"location":"webelement-extensions/#setzoomlevel","title":"SetZoomLevel","text":"<p>The <code>SetZoomLevel</code> method is an extension method that sets the zoom level of the browser.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void SetZoomLevel(this IWebDriver driver, int zoomPercent)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <code>zoomPercent</code> int The zoom level percentage. <ol> <li>JavaScript Execution: Executes a JavaScript script to set the zoom level.</li> <li>Zoom Level: Sets the zoom level of the browser to the specified percentage.</li> <li>Zoom In/Out: Increases or decreases the zoom level.</li> </ol> <pre><code>driver.SetZoomLevel(150);\n</code></pre> <p>Note: Refrain from using this method for now as it's still a bit undeveloped.</p>"},{"location":"webelement-extensions/#clickbyoffsetfromviewport","title":"ClickByOffSetFromViewport","text":"<p>The <code>ClickByOffSetFromViewport</code> method is an extension method that clicks on the webpage by providing the offset from the viewport.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ClickByOffSetFromViewport(this IWebDriver driver, Point point)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <code>point</code> Point The offset from the viewport. <ol> <li>JavaScript Execution: Executes a JavaScript script to click on the webpage.</li> <li>Offset: Clicks on the webpage at the specified offset from the viewport.</li> </ol> <pre><code>driver.ClickByOffSetFromViewport(new Point(100, 100));\n</code></pre> <p>Note: Refrain from using this method for now as it's still a bit undeveloped.</p>"}]}